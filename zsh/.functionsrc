#!/usr/bin/env bash

####################
# git functions
# Note: The below functions use hub (https://github.com/github/hub) instead of git
####################

# Compare the current branch to a supplied branch (or master if no branch is supplied) and view the diff (similar to creating a GitHub PR)
function gdpr() {
	if [[ -z $1 ]]
	then
		hub diff master...$(hub rev-parse --abbrev-ref HEAD)
	else
		hub diff $1...$(hub rev-parse --abbrev-ref HEAD)
	fi
}

# Quickly merge the current branch with a supplied branch (or master if no branch is supplied)
function gm() {
	BRANCH=$(hub rev-parse --abbrev-ref HEAD)

	if [[ -z $1 ]]
	then
		hub checkout master && hub pull && hub checkout $BRANCH && hub merge master
	else
		hub checkout $1 && hub pull && hub checkout $BRANCH && hub merge $1
	fi
}

# Checkout a PR by PR number (useful if someone created a PR from a fork)
# Note: 'hub pr checkout $1' should work in place of this function but receives "x509: certificate signed by unknown authority" because of Walmart security settings
function gcpr() {
	hub checkout master && hub pull && hub pull origin pull/$1/head:pr/$1 && hub checkout pr/$1
}

# Delete local git branches that are not present on the remote
function gclean() {
	hub remote prune origin >/dev/null 2>&1

	MERGED_BRANCHES=$(hub branch --merged master --no-color | cut -c 3- | grep -v '^[ *]*master$')
	ORPHAN_BRANCHES=$(grep gone <(hub branch -v) | cut -d ' ' -f 3)
	BRANCHES_WITH_NO_REMOTE=$(hub branch -vv | cut -c 3- | awk '$3 !~/\[/ { print $1 }')

	if [[ ! -z $MERGED_BRANCHES ]]; then
		echo "# Merged branches:"
		echo $MERGED_BRANCHES
	fi

	if [[ ! -z $ORPHAN_BRANCHES ]]; then
		echo "# Orphan branches:"
		echo $ORPHAN_BRANCHES
	fi

	if [[ ! -z $BRANCHES_WITH_NO_REMOTE ]]; then
		echo "# Branches with no remote:"
		echo $BRANCHES_WITH_NO_REMOTE
	fi

	if [[ -z $MERGED_BRANCHES ]] && [[ -z $ORPHAN_BRANCHES ]] && [[ -z $BRANCHES_WITH_NO_REMOTE ]]
	then
		echo "Repo is already clean"
	else
		# Force delete of stubborn branches if -f is passed
		if [ "$1" = "-f" ]
		then
			read "DELETE?Force delete the listed branches? [y/N] "
			if [ "$DELETE" = "y" ]; then
				echo $MERGED_BRANCHES | xargs hub branch -D
				echo $ORPHAN_BRANCHES | xargs hub branch -D
				echo $BRANCHES_WITH_NO_REMOTE | xargs hub branch -D
			else
				echo "Aborted"
			fi
		else
			read "DELETE?Delete the listed branches? [y/N] "
			if [ "$DELETE" = "y" ]; then
				echo $MERGED_BRANCHES | xargs hub branch -d
				echo $ORPHAN_BRANCHES | xargs hub branch -d
				echo $BRANCHES_WITH_NO_REMOTE | xargs hub branch -d
			else
				echo "Aborted"
			fi
		fi
	fi
}

# Add all git changes with a commit message (prepend the branch name to the commit message if the branch name contains a Jira card number) and push to remote
function gitt() {
	if [ -z "$1" ]
	then
		echo "No commit message supplied"
	else
		BRANCH="$(hub rev-parse --abbrev-ref HEAD | awk 'match($0, /[A-Z]+-[[:digit:]]+/) { print substr($0, RSTART, RLENGTH) }')"

		hub add -A

		if [ -z "$BRANCH" ]
		then
			hub commit -s -m $1
		else
			hub commit -s -m "$BRANCH $1"
		fi

		hub push -u
	fi
}

# Generate a .gitignore file using gitignore.io
function gi() {
	if [ -z "$1" ]
	then
		curl -L -s https://www.gitignore.io/api/linux,macos,windows
	else
		if [ "$1" = "list" ]
		then
			if [ -z "$2" ]
			then
				curl -L -s https://www.gitignore.io/api/list?format=lines
			else
				curl -L -s https://www.gitignore.io/api/list?format=lines | ack $2
			fi
		else
			curl -L -s https://www.gitignore.io/api/"$1"
		fi
	fi
}

# Find local git repositories that have unpushed commits or uncommitted files
function wip() {
	for repo in `find . -name .git -type d -prune`
	do
		# Use a subshell to avoid having to cd out of the directory)
		(
		cd $repo && cd ..

		if [[ ! -z $(hub --no-pager diff HEAD) || ! -z $(hub status --short) || ! -z $(hub cherry -v 2>&1) || ! -z $(hub --no-pager log --branches --not --remotes --no-walk --pretty=tformat:"%d%n") || ! -z $(hub branch -vv | cut -c 3- | awk '$3 !~/\[/ { print $1 }') ]]
		then
			echo $repo

			# Make newlines the only split character
			IFS=$'\n'

			for line in `hub branch -vv | cut -c 3- | awk '$3 !~/\[/ { print $1 }'`
			do
				echo "  No remote: "$line
			done

			for line in `hub --no-pager log --branches --not --remotes --no-walk --pretty=tformat:"%d%n"`
			do
				echo "  Unpushed/outdated: "$line
			done
		fi
		)
	done
}

####################
# Arduboy functions
# Note: These functions were created and used during visual asset development of Crates (https://github.com/compycore/crates)
####################

function ardbitmap() {
	# Deal with GIFs
	if [[ $1 == *.gif ]]
	then
		# The image we're currently on
		COUNTER=0

		# Create a directory to put the frames into
		mkdir ardbitmap
		# Rip the GIF into frames
		convert $1 ardbitmap/frame%03d.png

		# Loop through the frames
		for IMAGE in ardbitmap/*
		do
			# Run the compressor on the single frame
			java -jar ~/.ardbitmap/compressor.jar $IMAGE >> $2

			# Number the frame in the output file using the counter
			sed -i '' -e 's/OUT\[\]/OUT_'$COUNTER'\[\]/g' $2

			# Add a couple newlines to the output file
			echo >> $2
			echo >> $2

			# Increment the counter
			COUNTER=$((COUNTER+1))

			# Preview the image if we passed a third argument
			if [[ $3 ]]
			then
				java -jar ~/.ardbitmap/compressor.jar $IMAGE -v
			fi
		done

		# Cleanup
		rm -rf ardbitmap
	else
		# Run the compressor on the single frame
		java -jar ~/.ardbitmap/compressor.jar $1 >> $2

		# Preview the image if we passed a third argument
		if [[ $3 ]]
		then
			java -jar ~/.ardbitmap/compressor.jar $1 -v
		fi
	fi
}

function maskify() {
	if [[ $1 == *.gif ]]
	then
		# Get just the filename
		FILENAME="${1%.*}"

		# Make directories for organization
		mkdir -p maskify/black
		mkdir -p maskify/white

		# Split the animation
		convert $1 maskify/frame%03d.png

		# Make the masks
		cd maskify/black
		convert ../*.png -transparent white -opaque black -fill white -set filename:f '%t-mask-black.%e' +adjoin '%[filename:f]'
		# Make an animation
		convert -delay 10 -dispose previous -loop 0 *.png ../../$FILENAME-mask-black.gif
		cd ../..

		cd maskify/white
		convert ../*.png -transparent black -set filename:f '%t-mask-white.%e' +adjoin '%[filename:f]'
		# Make an animation
		convert -delay 10 -dispose previous -loop 0 *.png ../../$FILENAME-mask-white.gif
		cd ../..

		# Cleanup
		rm -rf maskify
	else
		convert $1 -transparent white -opaque black -fill white -set filename:f '%t-mask-black.%e' +adjoin '%[filename:f]'
		convert $1 -transparent black -set filename:f '%t-mask-white.%e' +adjoin '%[filename:f]'
	fi
}

function bitify() {
	if [[ -z $1 || -z $2 || -z $3 ]]
	then
		echo "One or more arguments are missing"
	elif (( $3 % 8 != 0 ))
	then
		echo "Image height must be a multiple of 8"
	else
		# Make an animation
		convert -monochrome -scale 500% -delay 10 -dispose previous -loop 0 *.png ../$1.gif
		# Make the individual frames
		convert *.png -gravity center -crop $2x$3+0+0 -set filename:f '%t-cropped.%e' +adjoin '%[filename:f]'
		# Make an opacity mask sprite sheet
		convert *-cropped.png -append -fill white -colorize 100% -background black -alpha remove mask.png
		# Combine and dither frames into a sprite sheet
		convert *-cropped.png -append -monochrome sheet.png
		# Copy opacity into the dithered sprite sheet
		convert sheet.png mask.png -alpha off -compose CopyOpacity -composite ../$1_$2x$3.png
		# Clean up
		rm *-cropped.png
		rm mask.png
		rm sheet.png
	fi
}

function gifify() {
	if [[ -z $1 || -z $2 || -z $3 ]]
	then
		echo "One or more arguments are missing"
	elif (( $3 % 8 != 0 ))
	then
		echo "Image height must be a multiple of 8"
	else
		for IMAGE in *
		do
			# Get just the filename (no extension)
			FILENAME="${IMAGE%.*}"
			# Make the individual frames
			convert $IMAGE -gravity center -crop $2x$3+0+0 +repage -set filename:f '%t-cropped.%e' +adjoin '%[filename:f]'
			# Make an opacity mask sprite sheet
			convert $FILENAME-cropped.png -fill white -colorize 100% -background black -alpha remove -set filename:f '%t-mask.%e' +adjoin '%[filename:f]'
			# Make the cropped frames monochrome
			convert $FILENAME-cropped.png -monochrome -set filename:f '%t-monochrome.%e' +adjoin '%[filename:f]'
			# Copy opacity into the dithered sprite sheet
			convert $FILENAME-cropped-monochrome.png $FILENAME-cropped-mask.png -alpha off -compose CopyOpacity -composite $FILENAME-final.png
		done

		# Make an animation
		convert -delay 10 -dispose previous -loop 0 *-final.png ../$1.gif

		# Clean up
		rm *-cropped.png
		rm *-cropped-monochrome.png
		rm *-cropped-mask.png
		rm *-final.png
	fi
}

####################
# SSH functions
####################

# SSH into multiple servers using SSH keys and run a supplied command on each before saving the output and errors to text files
function mssh() {
	for HOST in $(cat $2)
	do
		ssh -o StrictHostKeyChecking=no "$1@$HOST" "$3" >"output.$HOST.txt" 2>"output.$HOST.err.txt" &
	done
	wait
}

# SSH into multiple servers using a password and run a supplied command on each before saving the output and errors to text files
function msshp() {
	read -s "PASS?Password: "

	for HOST in $(cat $2)
	do
		sshpass -p "$PASS" ssh -o StrictHostKeyChecking=no "$1@$HOST" "$3" >"output.$HOST.txt" 2>"output.$HOST.err.txt" &
	done
	wait
}

####################
# Docker functions
####################

# Kill all running containers
function drydock() {
	docker kill $(docker ps -a -q) 2>/dev/null || true
}

# Kill and remove all containers
function scuttle() {
	docker kill $(docker ps -a -q) 2>/dev/null || true
	docker rm $(docker ps -a -q) 2>/dev/null || true
}

# Remove all saved Docker images
function sink() {
	docker rmi $(docker images -q) 2>/dev/null || true
}

####################
# Work functions
####################

# Combine files to aid in porting from CCM to ConfigClient
function combine() {
	s -f $1 | tail -r | xargs cat > combined-$(basename $1 .properties).conf
}

# Combine the multiple filetypes and remove empty files
function unite() {
	find . -type f -empty | xargs trash
	s -f logging.properties | xargs trash

	combine database.properties && combine application.properties && combine kafka.properties && combine business.properties

	find . -type f -empty | xargs trash

	for f in combined-*.conf
	do
		gsed -z -i 's/=\n/=""\n/g' $f
		gsed -i 's/URL=\([^" >][^ >]*\)/URL="\1"/g' $f
		gsed -i 's/URI=\([^" >][^ >]*\)/URI="\1"/g' $f
		gsed -i 's/HOST=\([^" >][^ >]*\)/HOST="\1"/g' $f
	done
}

####################
# General functions
####################

function fimg() {
	curl $1 --silent | sed -n 's/.*href="\([^"]*\).*/\1/p' | ack 'jpeg|jpg|png' | ack --passthru 'shopify'
}

# Copy a file and remove it (useful for repetitive work tasks)
function cosh() {
	copy $1 && trash $1
}

# Compare two files and print lines from the second file that are not included in the first file
function includes() {
	while read LINE
	do
		if ! grep -qr "\b$LINE\b" "$2"
		then
			echo $LINE # The line was not found
		fi
	done <$1
}

# Generate cellular automata wallpapers using gautomata
function cells() {
	if [ -z $1 ]
	then
		echo "No iteration count supplied"
	else
		for i in {1..$1}
		do
			WIDTH=1920
			HEIGHT=800

			if [ -z $2 ]
			then
				gautomata -w $WIDTH -h $HEIGHT -b -a random
			else
				gautomata -w $WIDTH -h $HEIGHT -b -a $2
			fi
		done

		echo "Scaling images"
		mogrify -scale 3840x1600+0+0 *.png
	fi
}

# Preview a file in the macOS Quick Look viewer
function q() {
	qlmanage -p "$@" >/dev/null 2>&1
}

# Used for taking notes from the command line
function n() {
	local fpath=$HOME/Desktop/notes.md

	if [ "$1" = "v" ]; then
		nvim + $fpath
	elif [ "$1" = "date" ]; then
		echo '' >> $fpath
		echo '# '`date +"%m-%d-%Y-%T"` >> $fpath
		echo '---------------------' >> $fpath
	elif [ "$1" = "" ]; then
		less +G $fpath
	else
		echo '' >> $fpath
		echo $@ >> $fpath
	fi
}

# Generate Walmart Labs bolt wallpapers
function boltcookie() {
	for file in *
	do
		TIME=$(date +%s)
		~/Documents/Projects/cookie-cutter/cookie-cutter.sh ~/Documents/Projects/dropbox/branding/bolt_pixel@2x.png "$file" ~/Documents/Trunk/wallpaper/randomized/$TIME.png 5760 3600
	done
}

# CLI file explorer with cd on close functionality (triggered via Control + G)
function e() {
	nnn "$@"

	if [ -f $NNN_TMPFILE ]; then
		. $NNN_TMPFILE
		rm $NNN_TMPFILE
	fi
}

# Copy the contents of a file to the clipboard
function copy() {
	cat $1 | pb
}

# Update all Homebrew and nvim packages
function brup() {
	# The below commands are chained via &&\ so that the function fails when a single command fails
	brew -v update &&\
	brew -v upgrade &&\
	brew -v cleanup &&\
	brew -v doctor &&\

	brew -v cask upgrade --greedy &&\

	pip3 install pip --upgrade &&\
	pip3 install neovim --upgrade &&\

	nvim +GoUpdateBinaries +PlugUpdate +PlugUpgrade +qall &&\

	tldr --update &&\

	choco upgrade all -y &&\

	sudo apt update && sudo apt -y upgrade &&\

	echo "brup() finished"
}

# Run a LOVE project so you can see console output
function luv() {
	love $(pwd)
}

# Quickly search the current directory (and child directories) for files with filenames or contents that match the supplied search term
function search() {
	if [ $1 = "-f" ]
	then
		find . -name "*$2*" | ack -i --passthru "$2"
	else
		find . -name "*$1*" | ack -i --passthru "$1"
		ack -i "$1"
	fi
}

# Find the top N CLI commands by usage as reported by 'history'
functions freq() {
	history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n50
}
