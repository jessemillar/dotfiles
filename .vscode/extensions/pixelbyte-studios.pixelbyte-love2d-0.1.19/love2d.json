[
    {
        "category": "audio",
        "description": "Provides an interface to output sound to the user's speakers.",
        "functions": [
            {
                "methodName": "getActiveEffects",
                "description": "Gets a list of the names of the currently enabled effects.",
                "parameters": []
            },
            {
                "methodName": "getActiveSourceCount",
                "description": "Gets the current number of simultaneously playing sources.",
                "parameters": []
            },
            {
                "methodName": "getDistanceModel",
                "description": "Returns the distance attenuation model.",
                "parameters": []
            },
            {
                "methodName": "getDopplerScale",
                "description": "Gets the global scale factor for doppler effects.",
                "parameters": []
            },
            {
                "methodName": "getEffect",
                "description": "Gets the settings associated with an effect.",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": " The name of the effect. "
                    }
                ]
            },
            {
                "methodName": "getMaxSceneEffects",
                "description": "Gets the maximum number of active effects.",
                "parameters": []
            },
            {
                "methodName": "getMaxSourceEffects",
                "description": "Gets the maximum number of active Effects for each Source.",
                "parameters": []
            },
            {
                "methodName": "getOrientation",
                "description": "Returns the orientation of the listener.",
                "parameters": []
            },
            {
                "methodName": "getPosition",
                "description": "Returns the position of the listener.",
                "parameters": []
            },
            {
                "methodName": "getRecordingDevices",
                "description": "Gets a list of RecordingDevices on the system.",
                "parameters": []
            },
            {
                "methodName": "getSourceCount",
                "description": "Gets the current number of simultaneously playing sources.",
                "parameters": []
            },
            {
                "methodName": "getVelocity",
                "description": "Returns the velocity of the listener.",
                "parameters": []
            },
            {
                "methodName": "getVolume",
                "description": "Returns the master volume.",
                "parameters": []
            },
            {
                "methodName": "isEffectsSupported",
                "description": "Gets whether Effects are supported in the system.",
                "parameters": []
            },
            {
                "methodName": "newQueueableSource",
                "description": "Creates a new Source usable for real-time generated sound playback with Source:queue.",
                "parameters": [
                    {
                        "name": "samplerate",
                        "type": "number",
                        "description": " Number of samples per second when playing. "
                    },
                    {
                        "name": "bitdepth",
                        "type": "number",
                        "description": " Bits per sample (8 or 16). "
                    },
                    {
                        "name": "channels",
                        "type": "number",
                        "description": " 1 for mono or 2 for stereo. "
                    },
                    {
                        "name": "buffercount",
                        "type": "number",
                        "description": " The number of buffers that can be queued up at any given time with Source:queue. Cannot be greater than 64. A sensible default (~8) is chosen if no value is specified. "
                    }
                ]
            },
            {
                "methodName": "newSource",
                "description": "Creates a new Source from a file, SoundData, or Decoder.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The filepath to the audio file. "
                    },
                    {
                        "name": "type",
                        "type": "SourceType",
                        "description": " Streaming or static source. "
                    }
                ]
            },
            {
                "methodName": "pause",
                "description": "Pauses specific or all currently played Sources.",
                "parameters": []
            },
            {
                "methodName": "play",
                "description": "Plays the specified Source.",
                "parameters": [
                    {
                        "name": "source",
                        "type": "Source",
                        "description": " The Source to play. "
                    }
                ]
            },
            {
                "methodName": "setDistanceModel",
                "description": "Sets the distance attenuation model.",
                "parameters": [
                    {
                        "name": "model",
                        "type": "DistanceModel",
                        "description": " The new distance model. "
                    }
                ]
            },
            {
                "methodName": "setDopplerScale",
                "description": "Sets a global scale factor for doppler effects.",
                "parameters": [
                    {
                        "name": "scale",
                        "type": "number",
                        "description": " The new doppler scale factor. The scale must be greater than 0. "
                    }
                ]
            },
            {
                "methodName": "setEffect",
                "description": "Defines an effect that can be applied to a Source.",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": " The name of the effect. "
                    },
                    {
                        "name": "settings",
                        "type": "table",
                        "description": " The settings to use for this effect, with the following fields: "
                    },
                    {
                        "name": "type",
                        "type": "EffectType",
                        "description": " The type of effect to use. "
                    },
                    {
                        "name": "volume",
                        "type": "number",
                        "description": " The volume of the effect. "
                    },
                    {
                        "name": "...",
                        "type": "number",
                        "description": " Effect-specific settings. See EffectType for available effects and their corresponding settings. "
                    }
                ]
            },
            {
                "methodName": "setMixWithSystem",
                "description": "Sets whether the system should mix the audio with the system's audio.",
                "parameters": [
                    {
                        "name": "mix",
                        "type": "boolean",
                        "description": " True to enable mixing, false to disable it. "
                    }
                ]
            },
            {
                "methodName": "setOrientation",
                "description": "Sets the orientation of the listener.",
                "parameters": [
                    {
                        "name": "fx,",
                        "type": "number",
                        "description": " Forward vector of the listener orientation. "
                    },
                    {
                        "name": "ux,",
                        "type": "number",
                        "description": " Up vector of the listener orientation. "
                    }
                ]
            },
            {
                "methodName": "setPosition",
                "description": "Sets the position of the listener.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x position of the listener. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y position of the listener. "
                    },
                    {
                        "name": "z",
                        "type": "number",
                        "description": " The z position of the listener. "
                    }
                ]
            },
            {
                "methodName": "setVelocity",
                "description": "Sets the velocity of the listener.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The X velocity of the listener. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The Y velocity of the listener. "
                    },
                    {
                        "name": "z",
                        "type": "number",
                        "description": " The Z velocity of the listener. "
                    }
                ]
            },
            {
                "methodName": "setVolume",
                "description": "Sets the master volume.",
                "parameters": [
                    {
                        "name": "volume",
                        "type": "number",
                        "description": " 1.0 is max and 0.0 is off. "
                    }
                ]
            },
            {
                "methodName": "stop",
                "description": "Stops currently played sources.",
                "parameters": []
            }
        ]
    },
    {
        "category": "data",
        "description": "Provides functionality for creating and transforming data.",
        "functions": [
            {
                "methodName": "compress",
                "description": "Compresses a string or data using a specific compression algorithm.",
                "parameters": [
                    {
                        "name": "container",
                        "type": "ContainerType",
                        "description": " What type to return the compressed data as. "
                    },
                    {
                        "name": "format",
                        "type": "CompressedDataFormat",
                        "description": " The format to use when compressing the string. "
                    },
                    {
                        "name": "rawstring",
                        "type": "string",
                        "description": " The raw (un-compressed) string to compress. "
                    },
                    {
                        "name": "level",
                        "type": "number",
                        "description": " The level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used. "
                    }
                ]
            },
            {
                "methodName": "decode",
                "description": "Decode Data or a string from any of the EncodeFormats to Data or string.",
                "parameters": [
                    {
                        "name": "container",
                        "type": "ContainerType",
                        "description": " What type to return the decoded data as. "
                    },
                    {
                        "name": "format",
                        "type": "EncodeFormat",
                        "description": " The format of the input data. "
                    },
                    {
                        "name": "sourceString",
                        "type": "string",
                        "description": " The raw (encoded) data to decode. "
                    }
                ]
            },
            {
                "methodName": "decompress",
                "description": "Decompresses a CompressedData or previously compressed string or Data object.",
                "parameters": [
                    {
                        "name": "container",
                        "type": "ContainerType",
                        "description": " What type to return the decompressed data as. "
                    },
                    {
                        "name": "compressedData",
                        "type": "CompressedData",
                        "description": " The compressed data to decompress. "
                    }
                ]
            },
            {
                "methodName": "encode",
                "description": "Encode Data or a string to a Data or string in one of the EncodeFormats.",
                "parameters": [
                    {
                        "name": "container",
                        "type": "ContainerType",
                        "description": " What type to return the encoded data as. "
                    },
                    {
                        "name": "format",
                        "type": "EncodeFormat",
                        "description": " The format of the output data. "
                    },
                    {
                        "name": "sourceString",
                        "type": "string",
                        "description": " The raw data to encode. "
                    },
                    {
                        "name": "linelength",
                        "type": "number",
                        "description": " The maximum line length of the output. Only supported for base64, ignored if 0. "
                    }
                ]
            },
            {
                "methodName": "getPackedSize",
                "description": "Gets the size in bytes that a given format used with love.data.pack will use.",
                "parameters": [
                    {
                        "name": "format",
                        "type": "string",
                        "description": " A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings. "
                    }
                ]
            },
            {
                "methodName": "hash",
                "description": "Compute message digest using specific hash algorithm.",
                "parameters": [
                    {
                        "name": "hashFunction",
                        "type": "HashFunction",
                        "description": " Hash algorithm to use. "
                    },
                    {
                        "name": "string",
                        "type": "string",
                        "description": " String to hash. "
                    }
                ]
            },
            {
                "methodName": "newByteData",
                "description": "Creates a new Data object containing arbitrary bytes.",
                "parameters": [
                    {
                        "name": "datastring",
                        "type": "string",
                        "description": " The byte string to copy. "
                    }
                ]
            },
            {
                "methodName": "newDataView",
                "description": "Creates a new Data referencing a subsection of an existing Data object.",
                "parameters": [
                    {
                        "name": "data",
                        "type": "Data",
                        "description": " The Data object to reference. "
                    },
                    {
                        "name": "offset",
                        "type": "number",
                        "description": " The offset of the subsection to reference, in bytes. "
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "description": " The size in bytes of the subsection to reference. "
                    }
                ]
            },
            {
                "methodName": "pack",
                "description": "Packs (serializes) simple Lua values.",
                "parameters": [
                    {
                        "name": "container",
                        "type": "ContainerType",
                        "description": " What type to return the encoded data as. "
                    },
                    {
                        "name": "format",
                        "type": "string",
                        "description": " A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings. "
                    },
                    {
                        "name": "v1",
                        "type": "value",
                        "description": " The first value (number, boolean, or string) to serialize. "
                    },
                    {
                        "name": "...",
                        "type": "value",
                        "description": " Additional values to serialize. "
                    }
                ]
            },
            {
                "methodName": "unpack",
                "description": "Unpacks (deserializes) a byte-string or Data into simple Lua values.",
                "parameters": [
                    {
                        "name": "format",
                        "type": "string",
                        "description": " A string determining how the values were packed. Follows the rules of Lua 5.3's string.pack format strings. "
                    },
                    {
                        "name": "datastring",
                        "type": "string",
                        "description": " A string containing the packed (serialized) data. "
                    },
                    {
                        "name": "pos",
                        "type": "number",
                        "description": " Where to start reading in the string. Negative values can be used to read relative from the end of the string. "
                    }
                ]
            }
        ]
    },
    {
        "category": "event",
        "description": "Manages events, like keypresses.",
        "functions": [
            {
                "methodName": "clear",
                "description": "Clears the event queue.",
                "parameters": []
            },
            {
                "methodName": "poll",
                "description": "Returns an iterator for messages in the event queue.",
                "parameters": []
            },
            {
                "methodName": "pump",
                "description": "Pump events into the event queue.",
                "parameters": []
            },
            {
                "methodName": "push",
                "description": "Adds an event to the event queue.",
                "parameters": [
                    {
                        "name": "n",
                        "type": "Event",
                        "description": " The name of the event. "
                    },
                    {
                        "name": "a",
                        "type": "Variant",
                        "description": " First event argument. "
                    },
                    {
                        "name": "b",
                        "type": "Variant",
                        "description": " Second event argument. "
                    },
                    {
                        "name": "c",
                        "type": "Variant",
                        "description": " Third event argument. "
                    }
                ]
            },
            {
                "methodName": "quit",
                "description": "Exits the LÃ–VE program.",
                "parameters": []
            },
            {
                "methodName": "wait",
                "description": "Like love.event.poll(), but blocks until there is an event in the queue.",
                "parameters": []
            }
        ]
    },
    {
        "category": "filesystem",
        "description": "Provides an interface to the user's filesystem.",
        "functions": [
            {
                "methodName": "append",
                "description": "Append data to an existing file.",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": " The name (and path) of the file. "
                    },
                    {
                        "name": "data",
                        "type": "string",
                        "description": " The string data to append to the file. "
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "description": " How many bytes to write. "
                    }
                ]
            },
            {
                "methodName": "areSymlinksEnabled",
                "description": "Gets whether love.filesystem follows symbolic links.",
                "parameters": []
            },
            {
                "methodName": "createDirectory",
                "description": "Creates a directory.",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": " The directory to create. "
                    }
                ]
            },
            {
                "methodName": "exists",
                "description": "Check whether a file or directory exists.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The path to a potential file or directory. "
                    }
                ]
            },
            {
                "methodName": "getAppdataDirectory",
                "description": "Returns the application data directory (could be the same as getUserDirectory)",
                "parameters": []
            },
            {
                "methodName": "getCRequirePath",
                "description": "Gets the filesystem paths that will be searched for c libraries when require is called.",
                "parameters": []
            },
            {
                "methodName": "getDirectoryItems",
                "description": "Returns all the files and subdirectories in the directory.",
                "parameters": [
                    {
                        "name": "dir",
                        "type": "string",
                        "description": " The directory. "
                    }
                ]
            },
            {
                "methodName": "getIdentity",
                "description": "Gets the write directory name for your game.",
                "parameters": []
            },
            {
                "methodName": "getInfo",
                "description": "Gets information about the specified file or directory.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": " The file or directory path to check. "
                    },
                    {
                        "name": "filtertype",
                        "type": "FileType",
                        "description": " If supplied, this parameter causes getInfo to only return the info table if the item at the given path matches the specified file type. "
                    }
                ]
            },
            {
                "methodName": "getLastModified",
                "description": "Gets the last modification time of a file.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The path and name to a file. "
                    }
                ]
            },
            {
                "methodName": "getRealDirectory",
                "description": "Gets the absolute path of the directory containing a filepath.",
                "parameters": [
                    {
                        "name": "filepath",
                        "type": "string",
                        "description": " The filepath to get the directory of. "
                    }
                ]
            },
            {
                "methodName": "getRequirePath",
                "description": "Gets the filesystem paths that will be searched when require is called.",
                "parameters": []
            },
            {
                "methodName": "getSaveDirectory",
                "description": "Gets the full path to the designated save directory.",
                "parameters": []
            },
            {
                "methodName": "getSize",
                "description": "Gets the size in bytes of a file.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The path and name to a file. "
                    }
                ]
            },
            {
                "methodName": "getSource",
                "description": "Returns the full path to the .love file or directory.",
                "parameters": []
            },
            {
                "methodName": "getSourceBaseDirectory",
                "description": "Returns the full path to the directory containing the .love file.",
                "parameters": []
            },
            {
                "methodName": "getUserDirectory",
                "description": "Returns the path of the user's directory",
                "parameters": []
            },
            {
                "methodName": "getWorkingDirectory",
                "description": "Gets the current working directory.",
                "parameters": []
            },
            {
                "methodName": "init",
                "description": "Initializes love.filesystem, will be called internally, so should not be used explictly.",
                "parameters": [
                    {
                        "name": "appname",
                        "type": "string",
                        "description": " The name of the application binary, typically love. "
                    }
                ]
            },
            {
                "methodName": "isDirectory",
                "description": "Check whether something is a directory.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The path to a potential directory. "
                    }
                ]
            },
            {
                "methodName": "isFile",
                "description": "Check whether something is a file.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The path to a potential file. "
                    }
                ]
            },
            {
                "methodName": "isFused",
                "description": "Gets whether the game is in fused mode or not.",
                "parameters": []
            },
            {
                "methodName": "isSymlink",
                "description": "Gets whether a filepath is actually a symbolic link.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": " The file or directory path to check. "
                    }
                ]
            },
            {
                "methodName": "lines",
                "description": "Iterate over the lines in a file.",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": " The name (and path) of the file "
                    }
                ]
            },
            {
                "methodName": "load",
                "description": "Loads a Lua file (but does not run it).",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": " The name (and path) of the file. "
                    }
                ]
            },
            {
                "methodName": "mount",
                "description": "Mounts a zip file or folder in the game's save directory for reading.",
                "parameters": [
                    {
                        "name": "archive",
                        "type": "string",
                        "description": " The folder or zip file in the game's save directory to mount. "
                    },
                    {
                        "name": "mountpoint",
                        "type": "string",
                        "description": " The new path the archive will be mounted to. "
                    },
                    {
                        "name": "appendToPath",
                        "type": "boolean",
                        "description": " Whether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories. "
                    }
                ]
            },
            {
                "methodName": "newFile",
                "description": "Creates a new File object.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The filename of the file. "
                    }
                ]
            },
            {
                "methodName": "newFileData",
                "description": "Creates a new FileData object.",
                "parameters": [
                    {
                        "name": "contents",
                        "type": "string",
                        "description": " The contents of the file. "
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "description": " The name of the file. "
                    }
                ]
            },
            {
                "methodName": "read",
                "description": "Read the contents of a file.",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": " The name (and path) of the file. "
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "description": " How many bytes to read. "
                    }
                ]
            },
            {
                "methodName": "remove",
                "description": "Removes a file (or directory).",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": " The file or directory to remove. "
                    }
                ]
            },
            {
                "methodName": "setCRequirePath",
                "description": "Sets the filesystem paths that will be searched for c libraries when require is called.",
                "parameters": [
                    {
                        "name": "paths",
                        "type": "string",
                        "description": " The paths that the require function will check in love's filesystem. "
                    }
                ]
            },
            {
                "methodName": "setIdentity",
                "description": "Sets the write directory for your game.",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": " The new identity that will be used as write directory. "
                    }
                ]
            },
            {
                "methodName": "setRequirePath",
                "description": "Sets the filesystem paths that will be searched when require is called.",
                "parameters": [
                    {
                        "name": "paths",
                        "type": "string",
                        "description": " The paths that the require function will check in love's filesystem. "
                    }
                ]
            },
            {
                "methodName": "setSource",
                "description": "Sets the source of the game, where the code is present. Used internally.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": " Absolute path to the game's source folder. "
                    }
                ]
            },
            {
                "methodName": "setSymlinksEnabled",
                "description": "Sets whether love.filesystem follows symbolic links.",
                "parameters": [
                    {
                        "name": "enable",
                        "type": "boolean",
                        "description": " Whether love.filesystem should follow symbolic links. "
                    }
                ]
            },
            {
                "methodName": "unmount",
                "description": "Unmounts a zip file or folder previously mounted with love.filesystem.mount.",
                "parameters": [
                    {
                        "name": "archive",
                        "type": "string",
                        "description": " The folder or zip file in the game's save directory which is currently mounted. "
                    }
                ]
            },
            {
                "methodName": "write",
                "description": "Write data to a file.",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": " The name (and path) of the file. "
                    },
                    {
                        "name": "data",
                        "type": "string",
                        "description": " The string data to write to the file. "
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "description": " How many bytes to write. "
                    }
                ]
            }
        ]
    },
    {
        "category": "font",
        "description": "Allows you to work with fonts.",
        "functions": [
            {
                "methodName": "newBMFontRasterizer",
                "description": "Creates a new BMFont Rasterizer.",
                "parameters": [
                    {
                        "name": "imageData",
                        "type": "ImageData",
                        "description": " The image data containing the drawable pictures of font glyphs. "
                    },
                    {
                        "name": "glyphs",
                        "type": "string",
                        "description": " The sequence of glyphs in the ImageData. "
                    }
                ]
            },
            {
                "methodName": "newGlyphData",
                "description": "Creates a new GlyphData.",
                "parameters": [
                    {
                        "name": "rasterizer",
                        "type": "Rasterizer",
                        "description": " The Rasterizer containing the font. "
                    },
                    {
                        "name": "glyph",
                        "type": "number",
                        "description": " The character code of the glyph. "
                    }
                ]
            },
            {
                "methodName": "newRasterizer",
                "description": "Creates a new Rasterizer.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The font file. "
                    }
                ]
            },
            {
                "methodName": "newTrueTypeRasterizer",
                "description": "Creates a new TrueType Rasterizer.",
                "parameters": [
                    {
                        "name": "size",
                        "type": "number",
                        "description": " The font size. "
                    },
                    {
                        "name": "hinting_mode",
                        "type": "HintingMode",
                        "description": " True Type hinting mode. "
                    }
                ]
            }
        ]
    },
    {
        "category": "graphics",
        "description": "Drawing of shapes and images, management of screen geometry.",
        "functions": [
            {
                "methodName": "arc",
                "description": "Draws an arc.",
                "parameters": [
                    {
                        "name": "drawmode",
                        "type": "DrawMode",
                        "description": " How to draw the arc. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The position of the center along x-axis. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The position of the center along y-axis. "
                    },
                    {
                        "name": "radius",
                        "type": "number",
                        "description": " Radius of the arc. "
                    },
                    {
                        "name": "angle1",
                        "type": "number",
                        "description": " The angle at which the arc begins. "
                    },
                    {
                        "name": "angle2",
                        "type": "number",
                        "description": " The angle at which the arc terminates. "
                    },
                    {
                        "name": "segments",
                        "type": "number",
                        "description": " The number of segments used for drawing the arc. "
                    }
                ]
            },
            {
                "methodName": "circle",
                "description": "Draws a circle.",
                "parameters": [
                    {
                        "name": "mode",
                        "type": "DrawMode",
                        "description": " How to draw the circle. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The position of the center along x-axis. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The position of the center along y-axis. "
                    },
                    {
                        "name": "radius",
                        "type": "number",
                        "description": " The radius of the circle. "
                    }
                ]
            },
            {
                "methodName": "clear",
                "description": "Clears the screen or active Canvas to the specified color.",
                "parameters": []
            },
            {
                "methodName": "discard",
                "description": "Discards the contents of the screen or active Canvas.",
                "parameters": [
                    {
                        "name": "discardcolor",
                        "type": "boolean",
                        "description": " Whether to discard the texture(s) of the active Canvas(es) (the contents of the screen if no Canvas is active.) "
                    },
                    {
                        "name": "discardstencil",
                        "type": "boolean",
                        "description": " Whether to discard the contents of the stencil buffer of the screen / active Canvas. "
                    }
                ]
            },
            {
                "methodName": "draw",
                "description": "Draws objects on screen.",
                "parameters": [
                    {
                        "name": "drawable",
                        "type": "Drawable",
                        "description": " A drawable object. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The position to draw the object (x-axis). "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The position to draw the object (y-axis). "
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "description": " Orientation (radians). "
                    },
                    {
                        "name": "sx",
                        "type": "number",
                        "description": " Scale factor (x-axis). "
                    },
                    {
                        "name": "sy",
                        "type": "number",
                        "description": " Scale factor (y-axis). "
                    },
                    {
                        "name": "ox",
                        "type": "number",
                        "description": " Origin offset (x-axis). "
                    },
                    {
                        "name": "oy",
                        "type": "number",
                        "description": " Origin offset (y-axis). "
                    }
                ]
            },
            {
                "methodName": "drawInstanced",
                "description": "Draws many instances of a Mesh with a single draw call, using hardware geometry instancing.",
                "parameters": [
                    {
                        "name": "mesh",
                        "type": "Mesh",
                        "description": " The mesh to render. "
                    },
                    {
                        "name": "instancecount",
                        "type": "number",
                        "description": " The number of instances to render. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The position to draw the instances (x-axis). "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The position to draw the instances (y-axis). "
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "description": " Orientation (radians). "
                    },
                    {
                        "name": "sx",
                        "type": "number",
                        "description": " Scale factor (x-axis). "
                    },
                    {
                        "name": "sy",
                        "type": "number",
                        "description": " Scale factor (y-axis). "
                    },
                    {
                        "name": "ox",
                        "type": "number",
                        "description": " Origin offset (x-axis). "
                    },
                    {
                        "name": "oy",
                        "type": "number",
                        "description": " Origin offset (y-axis). "
                    },
                    {
                        "name": "kx",
                        "type": "number",
                        "description": " Shearing factor (x-axis). "
                    },
                    {
                        "name": "ky",
                        "type": "number",
                        "description": " Shearing factor (y-axis). "
                    }
                ]
            },
            {
                "methodName": "drawLayer",
                "description": "Draws a layer of an Array Texture.",
                "parameters": [
                    {
                        "name": "texture",
                        "type": "Texture",
                        "description": " The Array Texture to draw. "
                    },
                    {
                        "name": "layerindex",
                        "type": "number",
                        "description": " The index of the layer to use when drawing. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The position to draw the texture (x-axis). "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The position to draw the texture (y-axis). "
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "description": " Orientation (radians). "
                    },
                    {
                        "name": "sx",
                        "type": "number",
                        "description": " Scale factor (x-axis). "
                    },
                    {
                        "name": "sy",
                        "type": "number",
                        "description": " Scale factor (y-axis). "
                    },
                    {
                        "name": "ox",
                        "type": "number",
                        "description": " Origin offset (x-axis). "
                    },
                    {
                        "name": "oy",
                        "type": "number",
                        "description": " Origin offset (y-axis). "
                    },
                    {
                        "name": "kx",
                        "type": "number",
                        "description": " Shearing factor (x-axis). "
                    },
                    {
                        "name": "ky",
                        "type": "number",
                        "description": " Shearing factor (y-axis). "
                    }
                ]
            },
            {
                "methodName": "ellipse",
                "description": "Draws an ellipse.",
                "parameters": [
                    {
                        "name": "mode",
                        "type": "DrawMode",
                        "description": " How to draw the ellipse. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The position of the center along x-axis. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The position of the center along y-axis. "
                    },
                    {
                        "name": "radiusx",
                        "type": "number",
                        "description": " The radius of the ellipse along the x-axis (half the ellipse's width). "
                    },
                    {
                        "name": "radiusy",
                        "type": "number",
                        "description": " The radius of the ellipse along the y-axis (half the ellipse's height). "
                    }
                ]
            },
            {
                "methodName": "flushBatch",
                "description": "Immediately renders any pending automatically batched draws.",
                "parameters": []
            },
            {
                "methodName": "line",
                "description": "Draws lines between points.",
                "parameters": [
                    {
                        "name": "x1",
                        "type": "number",
                        "description": " The position of first point on the x-axis. "
                    },
                    {
                        "name": "y1",
                        "type": "number",
                        "description": " The position of first point on the y-axis. "
                    },
                    {
                        "name": "x2",
                        "type": "number",
                        "description": " The position of second point on the x-axis. "
                    },
                    {
                        "name": "y2",
                        "type": "number",
                        "description": " The position of second point on the y-axis. "
                    },
                    {
                        "name": "...",
                        "type": "number",
                        "description": " You can continue passing point positions to draw a polyline. "
                    }
                ]
            },
            {
                "methodName": "points",
                "description": "Draws one or more points.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The position of the first point on the x-axis. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The position of the first point on the y-axis. "
                    },
                    {
                        "name": "...",
                        "type": "number",
                        "description": " The x and y coordinates of additional points. "
                    }
                ]
            },
            {
                "methodName": "polygon",
                "description": "Draw a polygon.",
                "parameters": [
                    {
                        "name": "mode",
                        "type": "DrawMode",
                        "description": " How to draw the polygon. "
                    },
                    {
                        "name": "...",
                        "type": "number",
                        "description": " The vertices of the polygon. "
                    }
                ]
            },
            {
                "methodName": "present",
                "description": "Displays the results of drawing operations on the screen.",
                "parameters": []
            },
            {
                "methodName": "print",
                "description": "Draws text on screen. If no Font is set, one will be created and set (once) if needed.",
                "parameters": [
                    {
                        "name": "text",
                        "type": "string",
                        "description": " The text to draw. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The position to draw the object (x-axis). "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The position to draw the object (y-axis). "
                    },
                    {
                        "name": "r",
                        "type": "number",
                        "description": " Orientation (radians). "
                    },
                    {
                        "name": "sx",
                        "type": "number",
                        "description": " Scale factor (x-axis). "
                    },
                    {
                        "name": "sy",
                        "type": "number",
                        "description": " Scale factor (y-axis). "
                    },
                    {
                        "name": "ox",
                        "type": "number",
                        "description": " Origin offset (x-axis). "
                    },
                    {
                        "name": "oy",
                        "type": "number",
                        "description": " Origin offset (y-axis). "
                    }
                ]
            },
            {
                "methodName": "printf",
                "description": "Draws formatted text, with word wrap and alignment.",
                "parameters": [
                    {
                        "name": "text",
                        "type": "string",
                        "description": " A text string. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The position on the x-axis. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The position on the y-axis. "
                    },
                    {
                        "name": "limit",
                        "type": "number",
                        "description": " Wrap the line after this many horizontal pixels. "
                    },
                    {
                        "name": "align",
                        "type": "AlignMode",
                        "description": " The alignment. "
                    }
                ]
            },
            {
                "methodName": "rectangle",
                "description": "Draws a rectangle.",
                "parameters": [
                    {
                        "name": "mode",
                        "type": "DrawMode",
                        "description": " How to draw the rectangle. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The position of top-left corner along the x-axis. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The position of top-left corner along the y-axis. "
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "description": " Width of the rectangle. "
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "description": " Height of the rectangle. "
                    }
                ]
            },
            {
                "methodName": "stencil",
                "description": "Draws geometry as a stencil.",
                "parameters": [
                    {
                        "name": "stencilfunction",
                        "type": "function",
                        "description": " Function which draws geometry. The stencil values of pixels, rather than the color of each pixel, will be affected by the geometry. "
                    },
                    {
                        "name": "action",
                        "type": "StencilAction",
                        "description": " How to modify any stencil values of pixels that are touched by what's drawn in the stencil function. "
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "description": " The new stencil value to use for pixels if the \"replace\" stencil action is used. Has no effect with other stencil actions. Must be between 0 and 255. "
                    },
                    {
                        "name": "keepvalues",
                        "type": "boolean",
                        "description": " True to preserve old stencil values of pixels, false to re-set every pixel's stencil value to 0 before executing the stencil function. love.graphics.clear will also re-set all stencil values. "
                    }
                ]
            },
            {
                "methodName": "captureScreenshot",
                "description": "Creates a screenshot once the current frame is done.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The filename to save the screenshot to. The encoded image type is determined based on the extension of the filename, and must be one of the ImageFormats. "
                    }
                ]
            },
            {
                "methodName": "newArrayImage",
                "description": "Creates a new array Image.",
                "parameters": [
                    {
                        "name": "slices",
                        "type": "table",
                        "description": " A table containing filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. Each sub-image must have the same dimensions. A table of tables can also be given, where each sub-table contains all mipmap levels for the slice index of that sub-table. "
                    },
                    {
                        "name": "settings",
                        "type": "table",
                        "description": " Optional table of settings to configure the array image, containing the following fields: "
                    },
                    {
                        "name": "mipmaps",
                        "type": "boolean",
                        "description": " True to make the image use mipmaps, false to disable them. Mipmaps will be automatically generated if the image isn't a compressed texture format. "
                    },
                    {
                        "name": "linear",
                        "type": "boolean",
                        "description": " True to treat the image's pixels as linear instead of sRGB, when gamma correct rendering is enabled. Most images are authored as sRGB. "
                    },
                    {
                        "name": "dpiscale",
                        "type": "number",
                        "description": " The DPI scale to use when drawing the array image and calling getWidth/getHeight. "
                    }
                ]
            },
            {
                "methodName": "newCanvas",
                "description": "Creates a new Canvas.",
                "parameters": []
            },
            {
                "methodName": "newCubeImage",
                "description": "Creates a new cubemap Image.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The filepath to a cubemap image file (or a File, FileData, or ImageData).} "
                    },
                    {
                        "name": "settings",
                        "type": "table",
                        "description": " Optional table of settings to configure the cubemap image, containing the following fields: "
                    },
                    {
                        "name": "mipmaps",
                        "type": "boolean",
                        "description": " True to make the image use mipmaps, false to disable them. Mipmaps will be automatically generated if the image isn't a compressed texture format. "
                    },
                    {
                        "name": "linear",
                        "type": "boolean",
                        "description": " True to treat the image's pixels as linear instead of sRGB, when gamma correct rendering is enabled. Most images are authored as sRGB. "
                    }
                ]
            },
            {
                "methodName": "newFont",
                "description": "Creates a new Font from a TrueType Font or BMFont file.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The filepath to the BMFont or TrueType font file. "
                    }
                ]
            },
            {
                "methodName": "newImage",
                "description": "Creates a new Image.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The filepath to the image file. "
                    }
                ]
            },
            {
                "methodName": "newImageFont",
                "description": "Creates a new Font by loading a specifically formatted image.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The filepath to the image file. "
                    },
                    {
                        "name": "glyphs",
                        "type": "string",
                        "description": " A string of the characters in the image in order from left to right. "
                    }
                ]
            },
            {
                "methodName": "newMesh",
                "description": "Creates a new Mesh.",
                "parameters": [
                    {
                        "name": "vertices",
                        "type": "table",
                        "description": " The table filled with vertex information tables for each vertex as follows: "
                    },
                    {
                        "name": "[1]",
                        "type": "number",
                        "description": " The position of the vertex on the x-axis. "
                    },
                    {
                        "name": "[2]",
                        "type": "number",
                        "description": " The position of the vertex on the y-axis. "
                    },
                    {
                        "name": "[3]",
                        "type": "number",
                        "description": " The u texture coordinate of the vertex. Texture coordinates are normally in the range of [0, 1], but can be greater or less (see WrapMode.) "
                    },
                    {
                        "name": "[4]",
                        "type": "number",
                        "description": " The v texture coordinate of the vertex. Texture coordinates are normally in the range of [0, 1], but can be greater or less (see WrapMode.) "
                    },
                    {
                        "name": "[5]",
                        "type": "number",
                        "description": " The red component of the vertex color. "
                    },
                    {
                        "name": "[6]",
                        "type": "number",
                        "description": " The green component of the vertex color. "
                    },
                    {
                        "name": "[7]",
                        "type": "number",
                        "description": " The blue component of the vertex color. "
                    },
                    {
                        "name": "[8]",
                        "type": "number",
                        "description": " The alpha component of the vertex color. "
                    }
                ]
            },
            {
                "methodName": "newParticleSystem",
                "description": "Creates a new ParticleSystem.",
                "parameters": [
                    {
                        "name": "image",
                        "type": "Image",
                        "description": " The image to use. "
                    },
                    {
                        "name": "buffer",
                        "type": "number",
                        "description": " The max number of particles at the same time. "
                    }
                ]
            },
            {
                "methodName": "newQuad",
                "description": "Creates a new Quad.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The top-left position in the Image along the x-axis. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The top-left position in the Image along the y-axis. "
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "description": " The width of the Quad in the Image. (Must be greater than 0.) "
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "description": " The height of the Quad in the Image. (Must be greater than 0.) "
                    },
                    {
                        "name": "sw",
                        "type": "number",
                        "description": " The reference width, the width of the Image. (Must be greater than 0.) "
                    },
                    {
                        "name": "sh",
                        "type": "number",
                        "description": " The reference height, the height of the Image. (Must be greater than 0.) "
                    }
                ]
            },
            {
                "methodName": "newShader",
                "description": "Creates a new Shader.",
                "parameters": [
                    {
                        "name": "code",
                        "type": "string",
                        "description": " The pixel shader or vertex shader code, or a filename pointing to a file with the code. "
                    }
                ]
            },
            {
                "methodName": "newSpriteBatch",
                "description": "Creates a new SpriteBatch.",
                "parameters": [
                    {
                        "name": "image",
                        "type": "Image",
                        "description": " The Image to use for the sprites. "
                    },
                    {
                        "name": "maxsprites",
                        "type": "number",
                        "description": " The maximum number of sprites that the SpriteBatch can contain at any given time. Since version 11.0, additional sprites added past this number will automatically grow the spritebatch. "
                    }
                ]
            },
            {
                "methodName": "newText",
                "description": "Creates a new drawable Text object.",
                "parameters": [
                    {
                        "name": "font",
                        "type": "Font",
                        "description": " The font to use for the text. "
                    },
                    {
                        "name": "textstring",
                        "type": "string",
                        "description": " The initial string of text that the new Text object will contain. May be nil. "
                    }
                ]
            },
            {
                "methodName": "newVideo",
                "description": "Creates a new Video.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The file path to the Ogg Theora video file. "
                    }
                ]
            },
            {
                "methodName": "newVolumeImage",
                "description": "Creates a new volume Image.",
                "parameters": [
                    {
                        "name": "layers",
                        "type": "table",
                        "description": " A table containing filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. A table of tables can also be given, where each sub-table represents a single mipmap level and contains all layers for that mipmap. "
                    },
                    {
                        "name": "settings",
                        "type": "table",
                        "description": " Optional table of settings to configure the volume image, containing the following fields: "
                    },
                    {
                        "name": "mipmaps",
                        "type": "boolean",
                        "description": " True to make the image use mipmaps, false to disable them. Mipmaps will be automatically generated if the image isn't a compressed texture format. "
                    },
                    {
                        "name": "linear",
                        "type": "boolean",
                        "description": " True to treat the image's pixels as linear instead of sRGB, when gamma correct rendering is enabled. Most images are authored as sRGB. "
                    }
                ]
            },
            {
                "methodName": "setNewFont",
                "description": "Creates and sets a new Font.",
                "parameters": [
                    {
                        "name": "size",
                        "type": "number",
                        "description": " The size of the font. "
                    }
                ]
            },
            {
                "methodName": "validateShader",
                "description": "Validates shader code.",
                "parameters": [
                    {
                        "name": "gles",
                        "type": "boolean",
                        "description": " Validate code as GLSL ES shader. "
                    },
                    {
                        "name": "code",
                        "type": "string",
                        "description": " The pixel shader or vertex shader code, or a filename pointing to a file with the code. "
                    }
                ]
            },
            {
                "methodName": "getBackgroundColor",
                "description": "Gets the current background color.",
                "parameters": []
            },
            {
                "methodName": "getBlendMode",
                "description": "Gets the blending mode.",
                "parameters": []
            },
            {
                "methodName": "getCanvas",
                "description": "Returns the current target Canvas.",
                "parameters": []
            },
            {
                "methodName": "getColor",
                "description": "Gets the current color.",
                "parameters": []
            },
            {
                "methodName": "getColorMask",
                "description": "Gets the active color components used when drawing.",
                "parameters": []
            },
            {
                "methodName": "getDefaultFilter",
                "description": "Returns the default scaling filters used with Images, Canvases, and Fonts.",
                "parameters": []
            },
            {
                "methodName": "getDepthMode",
                "description": "Gets the current depth test mode and whether writing to the depth buffer is enabled.",
                "parameters": []
            },
            {
                "methodName": "getFont",
                "description": "Gets the current Font object.",
                "parameters": []
            },
            {
                "methodName": "getFrontFaceWinding",
                "description": "Gets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.",
                "parameters": []
            },
            {
                "methodName": "getLineJoin",
                "description": "Gets the line join style.",
                "parameters": []
            },
            {
                "methodName": "getLineStyle",
                "description": "Gets the line style.",
                "parameters": []
            },
            {
                "methodName": "getLineWidth",
                "description": "Gets the current line width.",
                "parameters": []
            },
            {
                "methodName": "getMeshCullMode",
                "description": "Gets whether back-facing triangles in a Mesh are culled.",
                "parameters": []
            },
            {
                "methodName": "getPointSize",
                "description": "Gets the point size.",
                "parameters": []
            },
            {
                "methodName": "getScissor",
                "description": "Gets the current scissor box.",
                "parameters": []
            },
            {
                "methodName": "getShader",
                "description": "Gets the current Shader.",
                "parameters": []
            },
            {
                "methodName": "getStackDepth",
                "description": "Gets the current depth of the transform / state stack (the number of pushes without corresponding pops).",
                "parameters": []
            },
            {
                "methodName": "getStencilTest",
                "description": "Gets the current stencil test configuration.",
                "parameters": []
            },
            {
                "methodName": "intersectScissor",
                "description": "Sets the scissor to the rectangle created by the intersection of the specified rectangle with the existing scissor.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle. "
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "description": " The width of the rectangle to intersect with the existing scissor rectangle. "
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "description": " The height of the rectangle to intersect with the existing scissor rectangle. "
                    }
                ]
            },
            {
                "methodName": "isActive",
                "description": "Gets whether the graphics module is able to be used.",
                "parameters": []
            },
            {
                "methodName": "isGammaCorrect",
                "description": "Gets whether gamma-correct rendering is enabled.",
                "parameters": []
            },
            {
                "methodName": "isWireframe",
                "description": "Gets whether wireframe mode is used when drawing.",
                "parameters": []
            },
            {
                "methodName": "reset",
                "description": "Resets the current graphics settings.",
                "parameters": []
            },
            {
                "methodName": "setBackgroundColor",
                "description": "Sets the background color.",
                "parameters": [
                    {
                        "name": "red",
                        "type": "number",
                        "description": " The red component (0-1). "
                    },
                    {
                        "name": "green",
                        "type": "number",
                        "description": " The green component (0-1). "
                    },
                    {
                        "name": "blue",
                        "type": "number",
                        "description": " The blue component (0-1). "
                    }
                ]
            },
            {
                "methodName": "setBlendMode",
                "description": "Sets the blending mode.",
                "parameters": [
                    {
                        "name": "mode",
                        "type": "BlendMode",
                        "description": " The blend mode to use. "
                    }
                ]
            },
            {
                "methodName": "setCanvas",
                "description": "Captures drawing operations to a Canvas",
                "parameters": [
                    {
                        "name": "canvas",
                        "type": "Canvas",
                        "description": " The new target. "
                    }
                ]
            },
            {
                "methodName": "setColor",
                "description": "Sets the color used for drawing.",
                "parameters": [
                    {
                        "name": "red",
                        "type": "number",
                        "description": " The amount of red. "
                    },
                    {
                        "name": "green",
                        "type": "number",
                        "description": " The amount of green. "
                    },
                    {
                        "name": "blue",
                        "type": "number",
                        "description": " The amount of blue. "
                    },
                    {
                        "name": "alpha",
                        "type": "number",
                        "description": " The amount of alpha.  The alpha value will be applied to all subsequent draw operations, even the drawing of an image. "
                    }
                ]
            },
            {
                "methodName": "setColorMask",
                "description": "Sets the color mask. Enables or disables specific color components when rendering.",
                "parameters": [
                    {
                        "name": "red",
                        "type": "boolean",
                        "description": " Render red component. "
                    },
                    {
                        "name": "green",
                        "type": "boolean",
                        "description": " Render green component. "
                    },
                    {
                        "name": "blue",
                        "type": "boolean",
                        "description": " Render blue component. "
                    },
                    {
                        "name": "alpha",
                        "type": "boolean",
                        "description": " Render alpha component. "
                    }
                ]
            },
            {
                "methodName": "setDefaultFilter",
                "description": "Sets the default scaling filters used with Images, Canvases, and Fonts.",
                "parameters": [
                    {
                        "name": "min",
                        "type": "FilterMode",
                        "description": " Filter mode used when scaling the image down. "
                    },
                    {
                        "name": "mag",
                        "type": "FilterMode",
                        "description": " Filter mode used when scaling the image up. "
                    },
                    {
                        "name": "anisotropy",
                        "type": "number",
                        "description": " Maximum amount of Anisotropic Filtering used. "
                    }
                ]
            },
            {
                "methodName": "setDepthMode",
                "description": "Configures depth testing and writing to the depth buffer.",
                "parameters": [
                    {
                        "name": "comparemode",
                        "type": "CompareMode",
                        "description": " Depth comparison mode used for depth testing. "
                    },
                    {
                        "name": "write",
                        "type": "boolean",
                        "description": " Whether to write update / write values to the depth buffer when rendering. "
                    }
                ]
            },
            {
                "methodName": "setFont",
                "description": "Set an already-loaded Font as the current font.",
                "parameters": [
                    {
                        "name": "font",
                        "type": "Font",
                        "description": " The Font object to use. "
                    }
                ]
            },
            {
                "methodName": "setFrontFaceWinding",
                "description": "Sets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.",
                "parameters": [
                    {
                        "name": "winding",
                        "type": "VertexWinding",
                        "description": " The winding mode to use. The default winding is counterclockwise (\"ccw\"). "
                    }
                ]
            },
            {
                "methodName": "setLineJoin",
                "description": "Sets the line join style.",
                "parameters": [
                    {
                        "name": "join",
                        "type": "LineJoin",
                        "description": " The LineJoin to use. "
                    }
                ]
            },
            {
                "methodName": "setLineStyle",
                "description": "Sets the line style.",
                "parameters": [
                    {
                        "name": "style",
                        "type": "LineStyle",
                        "description": " The LineStyle to use. Line styles include smooth and rough. "
                    }
                ]
            },
            {
                "methodName": "setLineWidth",
                "description": "Sets the line width.",
                "parameters": [
                    {
                        "name": "width",
                        "type": "number",
                        "description": " The width of the line. "
                    }
                ]
            },
            {
                "methodName": "setMeshCullMode",
                "description": "Sets whether back-facing triangles in a Mesh are culled.",
                "parameters": [
                    {
                        "name": "mode",
                        "type": "CullMode",
                        "description": " The Mesh face culling mode to use (whether to render everything, cull back-facing triangles, or cull front-facing triangles). "
                    }
                ]
            },
            {
                "methodName": "setPointSize",
                "description": "Sets the point size.",
                "parameters": [
                    {
                        "name": "size",
                        "type": "number",
                        "description": " The new point size. "
                    }
                ]
            },
            {
                "methodName": "setScissor",
                "description": "Sets or disables scissor.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " x coordinate of upper left corner. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " y coordinate of upper left corner. "
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "description": " width of clipping rectangle. "
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "description": " height of clipping rectangle. "
                    }
                ]
            },
            {
                "methodName": "setShader",
                "description": "Routes drawing operations through a shader.",
                "parameters": [
                    {
                        "name": "shader",
                        "type": "Shader",
                        "description": " The new shader. "
                    }
                ]
            },
            {
                "methodName": "setStencilTest",
                "description": "Configures or disables stencil testing.",
                "parameters": [
                    {
                        "name": "comparemode",
                        "type": "CompareMode",
                        "description": " The type of comparison to make for each pixel. "
                    },
                    {
                        "name": "comparevalue",
                        "type": "number",
                        "description": " The value to use when comparing with the stencil value of each pixel. Must be between 0 and 255. "
                    }
                ]
            },
            {
                "methodName": "setWireframe",
                "description": "Sets whether wireframe lines will be used when drawing.",
                "parameters": [
                    {
                        "name": "enable",
                        "type": "boolean",
                        "description": " True to enable wireframe mode when drawing, false to disable it. "
                    }
                ]
            },
            {
                "methodName": "applyTransform",
                "description": "Applies the given Transform object to the current coordinate transformation.",
                "parameters": [
                    {
                        "name": "transform",
                        "type": "Transform",
                        "description": " The Transform object to apply to the current graphics coordinate transform. "
                    }
                ]
            },
            {
                "methodName": "inverseTransformPoint",
                "description": "Converts the given 2D position from screen-space into global coordinates.",
                "parameters": [
                    {
                        "name": "screenX",
                        "type": "number",
                        "description": " The x component of the screen-space position. "
                    },
                    {
                        "name": "screenY",
                        "type": "number",
                        "description": " The y component of the screen-space position. "
                    }
                ]
            },
            {
                "methodName": "origin",
                "description": "Resets the current coordinate transformation.",
                "parameters": []
            },
            {
                "methodName": "pop",
                "description": "Pops the current coordinate transformation from the transformation stack.",
                "parameters": []
            },
            {
                "methodName": "push",
                "description": "Copies and pushes the current coordinate transformation to the transformation stack.",
                "parameters": []
            },
            {
                "methodName": "replaceTransform",
                "description": "Replaces the current coordinate transformation with the given Transform object.",
                "parameters": [
                    {
                        "name": "transform",
                        "type": "Transform",
                        "description": " The Transform object to replace the current graphics coordinate transform with. "
                    }
                ]
            },
            {
                "methodName": "rotate",
                "description": "Rotates the coordinate system in two dimensions.",
                "parameters": [
                    {
                        "name": "angle",
                        "type": "number",
                        "description": " The amount to rotate the coordinate system in radians. "
                    }
                ]
            },
            {
                "methodName": "scale",
                "description": "Scales the coordinate system in two dimensions.",
                "parameters": [
                    {
                        "name": "sx",
                        "type": "number",
                        "description": " The scaling in the direction of the x-axis. "
                    },
                    {
                        "name": "sy",
                        "type": "number",
                        "description": " The scaling in the direction of the y-axis. If omitted, it defaults to same as parameter sx. "
                    }
                ]
            },
            {
                "methodName": "shear",
                "description": "Shears the coordinate system.",
                "parameters": [
                    {
                        "name": "kx",
                        "type": "number",
                        "description": " The shear factor on the x-axis. "
                    },
                    {
                        "name": "ky",
                        "type": "number",
                        "description": " The shear factor on the y-axis. "
                    }
                ]
            },
            {
                "methodName": "transformPoint",
                "description": "Converts the given 2D position from global coordinates into screen-space.",
                "parameters": [
                    {
                        "name": "globalX",
                        "type": "number",
                        "description": " The x component of the position in global coordinates. "
                    },
                    {
                        "name": "globalY",
                        "type": "number",
                        "description": " The y component of the position in global coordinates. "
                    }
                ]
            },
            {
                "methodName": "translate",
                "description": "Translates the coordinate system in two dimensions.",
                "parameters": [
                    {
                        "name": "dx",
                        "type": "number",
                        "description": " The translation relative to the x-axis. "
                    },
                    {
                        "name": "dy",
                        "type": "number",
                        "description": " The translation relative to the y-axis. "
                    }
                ]
            },
            {
                "methodName": "getDPIScale",
                "description": "Gets the DPI scale factor of the window.",
                "parameters": []
            },
            {
                "methodName": "getDimensions",
                "description": "Gets the width and height of the window.",
                "parameters": []
            },
            {
                "methodName": "getHeight",
                "description": "Gets the height in pixels of the window.",
                "parameters": []
            },
            {
                "methodName": "getPixelDimensions",
                "description": "Gets the width and height in pixels of the window.",
                "parameters": []
            },
            {
                "methodName": "getPixelHeight",
                "description": "Gets the height in pixels of the window.",
                "parameters": []
            },
            {
                "methodName": "getPixelWidth",
                "description": "Gets the width in pixels of the window.",
                "parameters": []
            },
            {
                "methodName": "getWidth",
                "description": "Gets the width in pixels of the window.",
                "parameters": []
            },
            {
                "methodName": "getCanvasFormats",
                "description": "Gets the available Canvas formats, and whether each is supported.",
                "parameters": []
            },
            {
                "methodName": "getImageFormats",
                "description": "Gets the pixel formats usable for Images, and whether each is supported.",
                "parameters": []
            },
            {
                "methodName": "getRendererInfo",
                "description": "Gets information about the system's video card and drivers.",
                "parameters": []
            },
            {
                "methodName": "getStats",
                "description": "Gets performance-related rendering statistics.",
                "parameters": []
            },
            {
                "methodName": "getSupported",
                "description": "Gets the optional graphics features and whether they're supported.",
                "parameters": []
            },
            {
                "methodName": "getSystemLimits",
                "description": "Gets the system-dependent maximum values for love.graphics features.",
                "parameters": []
            },
            {
                "methodName": "getTextureTypes",
                "description": "Gets the available texture types, and whether each is supported.",
                "parameters": []
            }
        ]
    },
    {
        "category": "image",
        "description": "Provides an interface to decode encoded image data.",
        "functions": [
            {
                "methodName": "isCompressed",
                "description": "Determines whether a file can be loaded as CompressedImageData.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The filename of the potentially compressed image file. "
                    }
                ]
            },
            {
                "methodName": "newCompressedData",
                "description": "Create a new CompressedImageData object from a compressed image file.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The filename of the compressed image file. "
                    }
                ]
            },
            {
                "methodName": "newImageData",
                "description": "Creates a new ImageData object.",
                "parameters": [
                    {
                        "name": "width",
                        "type": "number",
                        "description": " The width of the ImageData. "
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "description": " The height of the ImageData. "
                    }
                ]
            }
        ]
    },
    {
        "category": "joystick",
        "description": "Provides an interface to connected joysticks.",
        "functions": [
            {
                "methodName": "getJoystickCount",
                "description": "Gets the number of connected joysticks.",
                "parameters": []
            },
            {
                "methodName": "getJoysticks",
                "description": "Gets a list of connected Joysticks.",
                "parameters": []
            },
            {
                "methodName": "loadGamepadMappings",
                "description": "Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The filename to load the mappings string from. "
                    }
                ]
            },
            {
                "methodName": "saveGamepadMappings",
                "description": "Saves the virtual gamepad mappings of all recently-used Joysticks that are recognized as gamepads.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The filename to save the mappings string to. "
                    }
                ]
            },
            {
                "methodName": "setGamepadMapping",
                "description": "Binds a virtual gamepad input to a button, axis or hat.",
                "parameters": [
                    {
                        "name": "guid",
                        "type": "string",
                        "description": " The OS-dependent GUID for the type of Joystick the binding will affect. "
                    },
                    {
                        "name": "button",
                        "type": "GamepadButton",
                        "description": " The virtual gamepad button to bind. "
                    },
                    {
                        "name": "inputtype",
                        "type": "JoystickInputType",
                        "description": " The type of input to bind the virtual gamepad button to. "
                    },
                    {
                        "name": "inputindex",
                        "type": "number",
                        "description": " The index of the axis, button, or hat to bind the virtual gamepad button to. "
                    },
                    {
                        "name": "hatdir",
                        "type": "JoystickHat",
                        "description": " The direction of the hat, if the virtual gamepad button will be bound to a hat. nil otherwise. "
                    }
                ]
            }
        ]
    },
    {
        "category": "keyboard",
        "description": "Provides an interface to the user's keyboard.",
        "functions": [
            {
                "methodName": "getKeyFromScancode",
                "description": "Gets the key corresponding to the given hardware scancode.",
                "parameters": [
                    {
                        "name": "scancode",
                        "type": "Scancode",
                        "description": " The scancode to get the key from. "
                    }
                ]
            },
            {
                "methodName": "getScancodeFromKey",
                "description": "Gets the hardware scancode corresponding to the given key.",
                "parameters": [
                    {
                        "name": "key",
                        "type": "KeyConstant",
                        "description": " The key to get the scancode from. "
                    }
                ]
            },
            {
                "methodName": "hasKeyRepeat",
                "description": "Gets whether key repeat is enabled.",
                "parameters": []
            },
            {
                "methodName": "hasTextInput",
                "description": "Gets whether text input events are enabled.",
                "parameters": []
            },
            {
                "methodName": "isDown",
                "description": "Checks whether a certain key is down.",
                "parameters": [
                    {
                        "name": "key",
                        "type": "KeyConstant",
                        "description": " The key to check. "
                    }
                ]
            },
            {
                "methodName": "isScancodeDown",
                "description": "Checks whether the specified Scancodes are pressed.",
                "parameters": [
                    {
                        "name": "scancode",
                        "type": "Scancode",
                        "description": " A Scancode to check. "
                    },
                    {
                        "name": "...",
                        "type": "Scancode",
                        "description": " Additional Scancodes to check. "
                    }
                ]
            },
            {
                "methodName": "setKeyRepeat",
                "description": "Enables or disables key repeat for love.keypressed.",
                "parameters": [
                    {
                        "name": "enable",
                        "type": "boolean",
                        "description": " Whether repeat keypress events should be enabled when a key is held down. "
                    }
                ]
            },
            {
                "methodName": "setTextInput",
                "description": "Enables or disables text input events.",
                "parameters": [
                    {
                        "name": "enable",
                        "type": "boolean",
                        "description": " Whether text input events should be enabled. "
                    }
                ]
            }
        ]
    },
    {
        "category": "love",
        "functions": [
            {
                "methodName": "directorydropped",
                "description": "Callback function triggered when a directory is dragged and dropped onto the window.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": " The full platform-dependent path to the directory. It can be used as an argument to love.filesystem.mount, in order to gain read access to the directory with love.filesystem. "
                    }
                ]
            },
            {
                "methodName": "draw",
                "description": "Callback function used to draw on the screen every frame.",
                "parameters": []
            },
            {
                "methodName": "errhand",
                "description": "The error handler, used to display error messages.",
                "parameters": [
                    {
                        "name": "msg",
                        "type": "string",
                        "description": " The error message. "
                    }
                ]
            },
            {
                "methodName": "errorhandler",
                "description": "The error handler, used to display error messages.",
                "parameters": [
                    {
                        "name": "msg",
                        "type": "string",
                        "description": " The error message. "
                    }
                ]
            },
            {
                "methodName": "filedropped",
                "description": "Callback function triggered when a file is dragged and dropped onto the window.",
                "parameters": [
                    {
                        "name": "file",
                        "type": "DroppedFile",
                        "description": " The unopened File object representing the file that was dropped. "
                    }
                ]
            },
            {
                "methodName": "focus",
                "description": "Callback function triggered when window receives or loses focus.",
                "parameters": [
                    {
                        "name": "focus",
                        "type": "boolean",
                        "description": " True if the window gains focus, false if it loses focus. "
                    }
                ]
            },
            {
                "methodName": "keypressed",
                "description": "Callback function triggered when a key is pressed.",
                "parameters": [
                    {
                        "name": "key",
                        "type": "KeyConstant",
                        "description": " Character of the pressed key. "
                    },
                    {
                        "name": "scancode",
                        "type": "Scancode",
                        "description": " The scancode representing the pressed key. "
                    },
                    {
                        "name": "isrepeat",
                        "type": "boolean",
                        "description": " Whether this keypress event is a repeat. The delay between key repeats depends on the user's system settings. "
                    }
                ]
            },
            {
                "methodName": "keyreleased",
                "description": "Callback function triggered when a keyboard key is released.",
                "parameters": [
                    {
                        "name": "key",
                        "type": "KeyConstant",
                        "description": " Character of the released key. "
                    },
                    {
                        "name": "scancode",
                        "type": "Scancode",
                        "description": " The scancode representing the released key. "
                    }
                ]
            },
            {
                "methodName": "load",
                "description": "This function is called exactly once at the beginning of the game.",
                "parameters": [
                    {
                        "name": "arg",
                        "type": "table",
                        "description": " Command-line arguments given to the game. "
                    }
                ]
            },
            {
                "methodName": "lowmemory",
                "description": "Callback function triggered when the system is running out of memory on mobile devices.",
                "parameters": []
            },
            {
                "methodName": "mousefocus",
                "description": "Callback function triggered when window receives or loses mouse focus.",
                "parameters": [
                    {
                        "name": "focus",
                        "type": "boolean",
                        "description": " Whether the window has mouse focus or not. "
                    }
                ]
            },
            {
                "methodName": "mousemoved",
                "description": "Callback function triggered when the mouse is moved.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The mouse position on the x-axis. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The mouse position on the y-axis. "
                    },
                    {
                        "name": "dx",
                        "type": "number",
                        "description": " The amount moved along the x-axis since the last time love.mousemoved was called. "
                    },
                    {
                        "name": "dy",
                        "type": "number",
                        "description": " The amount moved along the y-axis since the last time love.mousemoved was called. "
                    }
                ]
            },
            {
                "methodName": "mousepressed",
                "description": "Callback function triggered when a mouse button is pressed.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " Mouse x position, in pixels. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " Mouse y position, in pixels. "
                    },
                    {
                        "name": "button",
                        "type": "number",
                        "description": " The button index that was pressed. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependent. "
                    },
                    {
                        "name": "istouch",
                        "type": "boolean",
                        "description": " True if the mouse button press originated from a touchscreen touch-press. "
                    }
                ]
            },
            {
                "methodName": "mousereleased",
                "description": "Callback function triggered when a mouse button is released.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " Mouse x position, in pixels. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " Mouse y position, in pixels. "
                    },
                    {
                        "name": "button",
                        "type": "number",
                        "description": " The button index that was released. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependent. "
                    },
                    {
                        "name": "istouch",
                        "type": "boolean",
                        "description": " True if the mouse button release originated from a touchscreen touch-release. "
                    }
                ]
            },
            {
                "methodName": "quit",
                "description": "Callback function triggered when the game is closed.",
                "parameters": []
            },
            {
                "methodName": "resize",
                "description": "Called when the window is resized.",
                "parameters": [
                    {
                        "name": "w",
                        "type": "number",
                        "description": " The new width, in pixels. "
                    },
                    {
                        "name": "h",
                        "type": "number",
                        "description": " The new height, in pixels. "
                    }
                ]
            },
            {
                "methodName": "run",
                "description": "The main function, containing the main loop. A sensible default is used when left out.",
                "parameters": []
            },
            {
                "methodName": "textedited",
                "description": "Called when the candidate text for an IME has changed.",
                "parameters": [
                    {
                        "name": "text",
                        "type": "string",
                        "description": " The UTF-8 encoded unicode candidate text. "
                    },
                    {
                        "name": "start",
                        "type": "number",
                        "description": " The start cursor of the selected candidate text. "
                    },
                    {
                        "name": "length",
                        "type": "number",
                        "description": " The length of the selected candidate text. May be 0. "
                    }
                ]
            },
            {
                "methodName": "textinput",
                "description": "Called when text has been entered by the user.",
                "parameters": [
                    {
                        "name": "text",
                        "type": "string",
                        "description": " The UTF-8 encoded unicode text. "
                    }
                ]
            },
            {
                "methodName": "threaderror",
                "description": "Callback function triggered when a Thread encounters an error.",
                "parameters": [
                    {
                        "name": "thread",
                        "type": "Thread",
                        "description": " The thread which produced the error. "
                    },
                    {
                        "name": "errorstr",
                        "type": "string",
                        "description": " The error message. "
                    }
                ]
            },
            {
                "methodName": "touchmoved",
                "description": "Callback function triggered when a touch press moves inside the touch screen.",
                "parameters": [
                    {
                        "name": "userdata",
                        "type": "light",
                        "description": " The identifier for the touch press. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x-axis position of the touch inside the window, in pixels. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y-axis position of the touch inside the window, in pixels. "
                    },
                    {
                        "name": "dx",
                        "type": "number",
                        "description": " The x-axis movement of the touch inside the window, in pixels. "
                    },
                    {
                        "name": "dy",
                        "type": "number",
                        "description": " The y-axis movement of the touch inside the window, in pixels. "
                    },
                    {
                        "name": "pressure",
                        "type": "number",
                        "description": " The amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1. "
                    }
                ]
            },
            {
                "methodName": "touchpressed",
                "description": "Callback function triggered when the touch screen is touched.",
                "parameters": [
                    {
                        "name": "userdata",
                        "type": "light",
                        "description": " The identifier for the touch press. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x-axis position of the touch press inside the window, in pixels. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y-axis position of the touch press inside the window, in pixels. "
                    },
                    {
                        "name": "dx",
                        "type": "number",
                        "description": " The x-axis movement of the touch press inside the window, in pixels. This should always be zero. "
                    },
                    {
                        "name": "dy",
                        "type": "number",
                        "description": " The y-axis movement of the touch press inside the window, in pixels. This should always be zero. "
                    },
                    {
                        "name": "pressure",
                        "type": "number",
                        "description": " The amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1. "
                    }
                ]
            },
            {
                "methodName": "touchreleased",
                "description": "Callback function triggered when the touch screen stops being touched.",
                "parameters": [
                    {
                        "name": "userdata",
                        "type": "light",
                        "description": " The identifier for the touch press. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x-axis position of the touch inside the window, in pixels. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y-axis position of the touch inside the window, in pixels. "
                    },
                    {
                        "name": "dx",
                        "type": "number",
                        "description": " The x-axis movement of the touch inside the window, in pixels. "
                    },
                    {
                        "name": "dy",
                        "type": "number",
                        "description": " The y-axis movement of the touch inside the window, in pixels. "
                    },
                    {
                        "name": "pressure",
                        "type": "number",
                        "description": " The amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1. "
                    }
                ]
            },
            {
                "methodName": "update",
                "description": "Callback function used to update the state of the game every frame.",
                "parameters": [
                    {
                        "name": "dt",
                        "type": "number",
                        "description": " Time since the last update in seconds. "
                    }
                ]
            },
            {
                "methodName": "visible",
                "description": "Callback function triggered when window is shown or hidden.",
                "parameters": [
                    {
                        "name": "visible",
                        "type": "boolean",
                        "description": " True if the window is visible, false if it isn't. "
                    }
                ]
            },
            {
                "methodName": "wheelmoved",
                "description": "Callback function triggered when the mouse wheel is moved.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " Amount of horizontal mouse wheel movement. Positive values indicate movement to the right. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " Amount of vertical mouse wheel movement. Positive values indicate upward movement. "
                    }
                ]
            },
            {
                "methodName": "gamepadaxis",
                "description": "Called when a Joystick's virtual gamepad axis is moved.",
                "parameters": [
                    {
                        "name": "joystick",
                        "type": "Joystick",
                        "description": " The joystick object. "
                    },
                    {
                        "name": "axis",
                        "type": "GamepadAxis",
                        "description": " The virtual gamepad axis. "
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "description": " The new axis value. "
                    }
                ]
            },
            {
                "methodName": "gamepadpressed",
                "description": "Called when a Joystick's virtual gamepad button is pressed.",
                "parameters": [
                    {
                        "name": "joystick",
                        "type": "Joystick",
                        "description": " The joystick object. "
                    },
                    {
                        "name": "button",
                        "type": "GamepadButton",
                        "description": " The virtual gamepad button. "
                    }
                ]
            },
            {
                "methodName": "gamepadreleased",
                "description": "Called when a Joystick's virtual gamepad button is released.",
                "parameters": [
                    {
                        "name": "joystick",
                        "type": "Joystick",
                        "description": " The joystick object. "
                    },
                    {
                        "name": "button",
                        "type": "GamepadButton",
                        "description": " The virtual gamepad button. "
                    }
                ]
            },
            {
                "methodName": "joystickadded",
                "description": "Called when a Joystick is connected.",
                "parameters": [
                    {
                        "name": "joystick",
                        "type": "Joystick",
                        "description": " The newly connected Joystick object. "
                    }
                ]
            },
            {
                "methodName": "joystickaxis",
                "description": "Called when a joystick axis moves.",
                "parameters": [
                    {
                        "name": "joystick",
                        "type": "Joystick",
                        "description": " The joystick object. "
                    },
                    {
                        "name": "axis",
                        "type": "number",
                        "description": " The axis number. "
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "description": " The new axis value. "
                    }
                ]
            },
            {
                "methodName": "joystickhat",
                "description": "Called when a joystick hat direction changes.",
                "parameters": [
                    {
                        "name": "joystick",
                        "type": "Joystick",
                        "description": " The joystick object. "
                    },
                    {
                        "name": "hat",
                        "type": "number",
                        "description": " The hat number. "
                    },
                    {
                        "name": "direction",
                        "type": "JoystickHat",
                        "description": " The new hat direction. "
                    }
                ]
            },
            {
                "methodName": "joystickpressed",
                "description": "Called when a joystick button is pressed.",
                "parameters": [
                    {
                        "name": "joystick",
                        "type": "Joystick",
                        "description": " The joystick object. "
                    },
                    {
                        "name": "button",
                        "type": "number",
                        "description": " The button number. "
                    }
                ]
            },
            {
                "methodName": "joystickreleased",
                "description": "Called when a joystick button is released.",
                "parameters": [
                    {
                        "name": "joystick",
                        "type": "Joystick",
                        "description": " The joystick object. "
                    },
                    {
                        "name": "button",
                        "type": "number",
                        "description": " The button number. "
                    }
                ]
            },
            {
                "methodName": "joystickremoved",
                "description": "Called when a Joystick is disconnected.",
                "parameters": [
                    {
                        "name": "joystick",
                        "type": "Joystick",
                        "description": " The now-disconnected Joystick object. "
                    }
                ]
            }
        ]
    },
    {
        "category": "math",
        "description": "Provides system-independent mathematical functions.",
        "functions": [
            {
                "methodName": "compress",
                "description": "Compresses a string or data using a specific compression algorithm.",
                "parameters": [
                    {
                        "name": "rawstring",
                        "type": "string",
                        "description": " The raw (un-compressed) string to compress. "
                    },
                    {
                        "name": "format",
                        "type": "CompressedDataFormat",
                        "description": " The format to use when compressing the string. "
                    },
                    {
                        "name": "level",
                        "type": "number",
                        "description": " The level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used. "
                    }
                ]
            },
            {
                "methodName": "decompress",
                "description": "Decompresses a CompressedData or previously compressed string or Data object.",
                "parameters": [
                    {
                        "name": "compressedData",
                        "type": "CompressedData",
                        "description": " The compressed data to decompress. "
                    }
                ]
            },
            {
                "methodName": "gammaToLinear",
                "description": "Converts a color from gamma-space (sRGB) to linear-space (RGB).",
                "parameters": [
                    {
                        "name": "r",
                        "type": "number",
                        "description": " The red channel of the sRGB color to convert. "
                    },
                    {
                        "name": "g",
                        "type": "number",
                        "description": " The green channel of the sRGB color to convert. "
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "description": " The blue channel of the sRGB color to convert. "
                    }
                ]
            },
            {
                "methodName": "getRandomSeed",
                "description": "Gets the seed of the random number generator.",
                "parameters": []
            },
            {
                "methodName": "isConvex",
                "description": "Checks whether a polygon is convex.",
                "parameters": [
                    {
                        "name": "vertices",
                        "type": "table",
                        "description": " The vertices of the polygon as a table in the form of {x1, y1, x2, y2, x3, y3, ...}. "
                    }
                ]
            },
            {
                "methodName": "linearToGamma",
                "description": "Converts a color from linear-space (RGB) to gamma-space (sRGB).",
                "parameters": [
                    {
                        "name": "lr",
                        "type": "number",
                        "description": " The red channel of the linear RGB color to convert. "
                    },
                    {
                        "name": "lg",
                        "type": "number",
                        "description": " The green channel of the linear RGB color to convert. "
                    },
                    {
                        "name": "lb",
                        "type": "number",
                        "description": " The blue channel of the linear RGB color to convert. "
                    }
                ]
            },
            {
                "methodName": "newBezierCurve",
                "description": "Creates a new BezierCurve object.",
                "parameters": [
                    {
                        "name": "vertices",
                        "type": "table",
                        "description": " The vertices of the control polygon as a table in the form of {x1, y1, x2, y2, x3, y3, ...}. "
                    }
                ]
            },
            {
                "methodName": "newRandomGenerator",
                "description": "Creates a new RandomGenerator object.",
                "parameters": []
            },
            {
                "methodName": "newTransform",
                "description": "Creates a new Transform object.",
                "parameters": []
            },
            {
                "methodName": "noise",
                "description": "Generates a Simplex noise value in 1-4 dimensions.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The number used to generate the noise value. "
                    }
                ]
            },
            {
                "methodName": "random",
                "description": "Get uniformly distributed pseudo-random number",
                "parameters": []
            },
            {
                "methodName": "randomNormal",
                "description": "Get a normally distributed pseudo random number.",
                "parameters": [
                    {
                        "name": "stddev",
                        "type": "number",
                        "description": " Standard deviation of the distribution. "
                    },
                    {
                        "name": "mean",
                        "type": "number",
                        "description": " The mean of the distribution. "
                    }
                ]
            },
            {
                "methodName": "setRandomSeed",
                "description": "Sets the seed of the random number generator.",
                "parameters": [
                    {
                        "name": "seed",
                        "type": "number",
                        "description": " The integer number with which you want to seed the randomization. Must be within the range of [0, 2^53 - 1]. "
                    }
                ]
            },
            {
                "methodName": "triangulate",
                "description": "Decomposes a simple polygon into triangles.",
                "parameters": [
                    {
                        "name": "polygon",
                        "type": "table",
                        "description": " Polygon to triangulate. Must not intersect itself. "
                    }
                ]
            }
        ]
    },
    {
        "category": "mouse",
        "description": "Provides an interface to the user's mouse.",
        "functions": [
            {
                "methodName": "getCursor",
                "description": "Gets the current Cursor.",
                "parameters": []
            },
            {
                "methodName": "getPosition",
                "description": "Returns the current position of the mouse.",
                "parameters": []
            },
            {
                "methodName": "getRelativeMode",
                "description": "Gets whether relative mode is enabled for the mouse.",
                "parameters": []
            },
            {
                "methodName": "getSystemCursor",
                "description": "Gets a Cursor object representing a system-native hardware cursor.",
                "parameters": [
                    {
                        "name": "ctype",
                        "type": "CursorType",
                        "description": " The type of system cursor to get. "
                    }
                ]
            },
            {
                "methodName": "getX",
                "description": "Returns the current x-position of the mouse.",
                "parameters": []
            },
            {
                "methodName": "getY",
                "description": "Returns the current y-position of the mouse.",
                "parameters": []
            },
            {
                "methodName": "hasCursor",
                "description": "Gets whether cursor functionality is supported.",
                "parameters": []
            },
            {
                "methodName": "isCursorSupported",
                "description": "Gets whether cursor functionality is supported.",
                "parameters": []
            },
            {
                "methodName": "isDown",
                "description": "Checks whether a certain button is down.",
                "parameters": [
                    {
                        "name": "button",
                        "type": "number",
                        "description": " The index of a button to check. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependant. "
                    },
                    {
                        "name": "...",
                        "type": "number",
                        "description": " Additional button numbers to check. "
                    }
                ]
            },
            {
                "methodName": "isGrabbed",
                "description": "Checks if the mouse is grabbed.",
                "parameters": []
            },
            {
                "methodName": "isVisible",
                "description": "Checks if the cursor is visible.",
                "parameters": []
            },
            {
                "methodName": "newCursor",
                "description": "Creates a new hardware Cursor object from an image.",
                "parameters": [
                    {
                        "name": "imageData",
                        "type": "ImageData",
                        "description": " The ImageData to use for the new Cursor. "
                    },
                    {
                        "name": "hotx",
                        "type": "number",
                        "description": " The x-coordinate in the ImageData of the cursor's hot spot. "
                    },
                    {
                        "name": "hoty",
                        "type": "number",
                        "description": " The y-coordinate in the ImageData of the cursor's hot spot. "
                    }
                ]
            },
            {
                "methodName": "setCursor",
                "description": "Sets the current mouse cursor.",
                "parameters": [
                    {
                        "name": "cursor",
                        "type": "Cursor",
                        "description": " The Cursor object to use as the current mouse cursor. "
                    }
                ]
            },
            {
                "methodName": "setGrabbed",
                "description": "Grabs the mouse and confines it to the window.",
                "parameters": [
                    {
                        "name": "grab",
                        "type": "boolean",
                        "description": " True to confine the mouse, false to let it leave the window. "
                    }
                ]
            },
            {
                "methodName": "setPosition",
                "description": "Sets the current position of the mouse.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The new position of the mouse along the x-axis. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The new position of the mouse along the y-axis. "
                    }
                ]
            },
            {
                "methodName": "setRelativeMode",
                "description": "Sets whether relative mode is enabled for the mouse.",
                "parameters": [
                    {
                        "name": "enable",
                        "type": "boolean",
                        "description": " True to enable relative mode, false to disable it. "
                    }
                ]
            },
            {
                "methodName": "setVisible",
                "description": "Sets the current visibility of the cursor.",
                "parameters": [
                    {
                        "name": "visible",
                        "type": "boolean",
                        "description": " True to set the cursor to visible, false to hide the cursor. "
                    }
                ]
            },
            {
                "methodName": "setX",
                "description": "Sets the current X position of the mouse.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The new position of the mouse along the x-axis. "
                    }
                ]
            },
            {
                "methodName": "setY",
                "description": "Sets the current Y position of the mouse.",
                "parameters": [
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The new position of the mouse along the y-axis. "
                    }
                ]
            }
        ]
    },
    {
        "category": "physics",
        "description": "Can simulate 2D rigid body physics in a realistic manner.",
        "functions": [
            {
                "methodName": "getDistance",
                "description": "Returns the two closest points between two fixtures and their distance.",
                "parameters": [
                    {
                        "name": "fixture1",
                        "type": "Fixture",
                        "description": " The first fixture. "
                    },
                    {
                        "name": "fixture2",
                        "type": "Fixture",
                        "description": " The second fixture. "
                    }
                ]
            },
            {
                "methodName": "getMeter",
                "description": "Returns the meter scale factor.",
                "parameters": []
            },
            {
                "methodName": "newBody",
                "description": "Creates a new body.",
                "parameters": [
                    {
                        "name": "world",
                        "type": "World",
                        "description": " The world to create the body in. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x position of the body. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y position of the body. "
                    },
                    {
                        "name": "type",
                        "type": "BodyType",
                        "description": " The type of the body. "
                    }
                ]
            },
            {
                "methodName": "newChainShape",
                "description": "Creates a new ChainShape.",
                "parameters": [
                    {
                        "name": "loop",
                        "type": "boolean",
                        "description": " If the chain should loop back to the first point. "
                    },
                    {
                        "name": "x1",
                        "type": "number",
                        "description": " The x position of the first point. "
                    },
                    {
                        "name": "y1",
                        "type": "number",
                        "description": " The y position of the first point. "
                    },
                    {
                        "name": "x2",
                        "type": "number",
                        "description": " The x position of the second point. "
                    },
                    {
                        "name": "y2",
                        "type": "number",
                        "description": " The y position of the second point. "
                    },
                    {
                        "name": "...",
                        "type": "number",
                        "description": " Additional point positions. "
                    }
                ]
            },
            {
                "methodName": "newCircleShape",
                "description": "Creates a new CircleShape.",
                "parameters": [
                    {
                        "name": "radius",
                        "type": "number",
                        "description": " The radius of the circle. "
                    }
                ]
            },
            {
                "methodName": "newDistanceJoint",
                "description": "Creates a DistanceJoint between two bodies.",
                "parameters": [
                    {
                        "name": "body1",
                        "type": "Body",
                        "description": " The first body to attach to the joint. "
                    },
                    {
                        "name": "body2",
                        "type": "Body",
                        "description": " The second body to attach to the joint. "
                    },
                    {
                        "name": "x1",
                        "type": "number",
                        "description": " The x position of the first anchor point (world space). "
                    },
                    {
                        "name": "y1",
                        "type": "number",
                        "description": " The y position of the first anchor point (world space). "
                    },
                    {
                        "name": "x2",
                        "type": "number",
                        "description": " The x position of the second anchor point (world space). "
                    },
                    {
                        "name": "y2",
                        "type": "number",
                        "description": " The y position of the second anchor point (world space). "
                    },
                    {
                        "name": "collideConnected",
                        "type": "boolean",
                        "description": " Specifies whether the two bodies should collide with each other. "
                    }
                ]
            },
            {
                "methodName": "newEdgeShape",
                "description": "Creates a new EdgeShape.",
                "parameters": [
                    {
                        "name": "x1",
                        "type": "number",
                        "description": " The x position of the first point. "
                    },
                    {
                        "name": "y1",
                        "type": "number",
                        "description": " The y position of the first point. "
                    },
                    {
                        "name": "x2",
                        "type": "number",
                        "description": " The x position of the second point. "
                    },
                    {
                        "name": "y2",
                        "type": "number",
                        "description": " The y position of the second point. "
                    }
                ]
            },
            {
                "methodName": "newFixture",
                "description": "Creates and attaches a fixture.",
                "parameters": [
                    {
                        "name": "body",
                        "type": "Body",
                        "description": " The body which gets the fixture attached. "
                    },
                    {
                        "name": "shape",
                        "type": "Shape",
                        "description": " The shape to be copied to the fixture. "
                    },
                    {
                        "name": "density",
                        "type": "number",
                        "description": " The density of the fixture. "
                    }
                ]
            },
            {
                "methodName": "newFrictionJoint",
                "description": "A FrictionJoint applies friction to a body.",
                "parameters": [
                    {
                        "name": "body1",
                        "type": "Body",
                        "description": " The first body to attach to the joint. "
                    },
                    {
                        "name": "body2",
                        "type": "Body",
                        "description": " The second body to attach to the joint. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x position of the anchor point. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y position of the anchor point. "
                    },
                    {
                        "name": "collideConnected",
                        "type": "boolean",
                        "description": " Specifies whether the two bodies should collide with each other. "
                    }
                ]
            },
            {
                "methodName": "newGearJoint",
                "description": "Create a GearJoint connecting two Joints.",
                "parameters": [
                    {
                        "name": "joint1",
                        "type": "Joint",
                        "description": " The first joint to connect with a gear joint. "
                    },
                    {
                        "name": "joint2",
                        "type": "Joint",
                        "description": " The second joint to connect with a gear joint. "
                    },
                    {
                        "name": "ratio",
                        "type": "number",
                        "description": " The gear ratio. "
                    },
                    {
                        "name": "collideConnected",
                        "type": "boolean",
                        "description": " Specifies whether the two bodies should collide with each other. "
                    }
                ]
            },
            {
                "methodName": "newMotorJoint",
                "description": "Creates a joint between two bodies which controls the relative motion between them.",
                "parameters": [
                    {
                        "name": "body1",
                        "type": "Body",
                        "description": " The first body to attach to the joint. "
                    },
                    {
                        "name": "body2",
                        "type": "Body",
                        "description": " The second body to attach to the joint. "
                    },
                    {
                        "name": "correctionFactor",
                        "type": "number",
                        "description": " The joint's initial position correction factor, in the range of [0, 1]. "
                    }
                ]
            },
            {
                "methodName": "newMouseJoint",
                "description": "Create a joint between a body and the mouse.",
                "parameters": [
                    {
                        "name": "body",
                        "type": "Body",
                        "description": " The body to attach to the mouse. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x position of the connecting point. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y position of the connecting point. "
                    }
                ]
            },
            {
                "methodName": "newPolygonShape",
                "description": "Creates a new PolygonShape.",
                "parameters": [
                    {
                        "name": "x1",
                        "type": "number",
                        "description": " The x position of the first point. "
                    },
                    {
                        "name": "y1",
                        "type": "number",
                        "description": " The y position of the first point. "
                    },
                    {
                        "name": "x2",
                        "type": "number",
                        "description": " The x position of the second point. "
                    },
                    {
                        "name": "y2",
                        "type": "number",
                        "description": " The y position of the second point. "
                    },
                    {
                        "name": "x3",
                        "type": "number",
                        "description": " The x position of the third point. "
                    },
                    {
                        "name": "y3",
                        "type": "number",
                        "description": " The y position of the third point. "
                    },
                    {
                        "name": "...",
                        "type": "number",
                        "description": " You can continue passing more point positions to create the PolygonShape. "
                    }
                ]
            },
            {
                "methodName": "newPrismaticJoint",
                "description": "Creates a PrismaticJoint between two bodies.",
                "parameters": [
                    {
                        "name": "body1",
                        "type": "Body",
                        "description": " The first body to connect with a prismatic joint. "
                    },
                    {
                        "name": "body2",
                        "type": "Body",
                        "description": " The second body to connect with a prismatic joint. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x coordinate of the anchor point. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y coordinate of the anchor point. "
                    },
                    {
                        "name": "ax",
                        "type": "number",
                        "description": " The x coordinate of the axis vector. "
                    },
                    {
                        "name": "ay",
                        "type": "number",
                        "description": " The y coordinate of the axis vector. "
                    },
                    {
                        "name": "collideConnected",
                        "type": "boolean",
                        "description": " Specifies whether the two bodies should collide with each other. "
                    }
                ]
            },
            {
                "methodName": "newPulleyJoint",
                "description": "Creates a PulleyJoint to join two bodies to each other and the ground.",
                "parameters": [
                    {
                        "name": "body1",
                        "type": "Body",
                        "description": " The first body to connect with a pulley joint. "
                    },
                    {
                        "name": "body2",
                        "type": "Body",
                        "description": " The second body to connect with a pulley joint. "
                    },
                    {
                        "name": "gx1",
                        "type": "number",
                        "description": " The x coordinate of the first body's ground anchor. "
                    },
                    {
                        "name": "gy1",
                        "type": "number",
                        "description": " The y coordinate of the first body's ground anchor. "
                    },
                    {
                        "name": "gx2",
                        "type": "number",
                        "description": " The x coordinate of the second body's ground anchor. "
                    },
                    {
                        "name": "gy2",
                        "type": "number",
                        "description": " The y coordinate of the second body's ground anchor. "
                    },
                    {
                        "name": "x1",
                        "type": "number",
                        "description": " The x coordinate of the pulley joint anchor in the first body. "
                    },
                    {
                        "name": "y1",
                        "type": "number",
                        "description": " The y coordinate of the pulley joint anchor in the first body. "
                    },
                    {
                        "name": "x2",
                        "type": "number",
                        "description": " The x coordinate of the pulley joint anchor in the second body. "
                    },
                    {
                        "name": "y2",
                        "type": "number",
                        "description": " The y coordinate of the pulley joint anchor in the second body. "
                    },
                    {
                        "name": "ratio",
                        "type": "number",
                        "description": " The joint ratio. "
                    },
                    {
                        "name": "collideConnected",
                        "type": "boolean",
                        "description": " Specifies whether the two bodies should collide with each other. "
                    }
                ]
            },
            {
                "methodName": "newRectangleShape",
                "description": "Shorthand for creating rectangular PolygonShapes.",
                "parameters": [
                    {
                        "name": "width",
                        "type": "number",
                        "description": " The width of the rectangle. "
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "description": " The height of the rectangle. "
                    }
                ]
            },
            {
                "methodName": "newRevoluteJoint",
                "description": "Creates a pivot joint between two bodies.",
                "parameters": [
                    {
                        "name": "body1",
                        "type": "Body",
                        "description": " The first body. "
                    },
                    {
                        "name": "body2",
                        "type": "Body",
                        "description": " The second body. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x position of the connecting point. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y position of the connecting point. "
                    },
                    {
                        "name": "collideConnected",
                        "type": "boolean",
                        "description": " Specifies whether the two bodies should collide with each other. "
                    }
                ]
            },
            {
                "methodName": "newRopeJoint",
                "description": "Creates a joint between two bodies that enforces a max distance between them.",
                "parameters": [
                    {
                        "name": "body1",
                        "type": "Body",
                        "description": " The first body to attach to the joint. "
                    },
                    {
                        "name": "body2",
                        "type": "Body",
                        "description": " The second body to attach to the joint. "
                    },
                    {
                        "name": "x1",
                        "type": "number",
                        "description": " The x position of the first anchor point. "
                    },
                    {
                        "name": "y1",
                        "type": "number",
                        "description": " The y position of the first anchor point. "
                    },
                    {
                        "name": "x2",
                        "type": "number",
                        "description": " The x position of the second anchor point. "
                    },
                    {
                        "name": "y2",
                        "type": "number",
                        "description": " The y position of the second anchor point. "
                    },
                    {
                        "name": "maxLength",
                        "type": "number",
                        "description": " The maximum distance for the bodies. "
                    },
                    {
                        "name": "collideConnected",
                        "type": "boolean",
                        "description": " Specifies whether the two bodies should collide with each other. "
                    }
                ]
            },
            {
                "methodName": "newWeldJoint",
                "description": "A WeldJoint essentially glues two bodies together.",
                "parameters": [
                    {
                        "name": "body1",
                        "type": "Body",
                        "description": " The first body to attach to the joint. "
                    },
                    {
                        "name": "body2",
                        "type": "Body",
                        "description": " The second body to attach to the joint. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x position of the anchor point (world space). "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y position of the anchor point (world space). "
                    },
                    {
                        "name": "collideConnected",
                        "type": "boolean",
                        "description": " Specifies whether the two bodies should collide with each other. "
                    }
                ]
            },
            {
                "methodName": "newWheelJoint",
                "description": "Creates a wheel joint.",
                "parameters": [
                    {
                        "name": "body1",
                        "type": "Body",
                        "description": " The first body. "
                    },
                    {
                        "name": "body2",
                        "type": "Body",
                        "description": " The second body. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x position of the anchor point. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y position of the anchor point. "
                    },
                    {
                        "name": "ax",
                        "type": "number",
                        "description": " The x position of the axis unit vector. "
                    },
                    {
                        "name": "ay",
                        "type": "number",
                        "description": " The y position of the axis unit vector. "
                    },
                    {
                        "name": "collideConnected",
                        "type": "boolean",
                        "description": " Specifies whether the two bodies should collide with each other. "
                    }
                ]
            },
            {
                "methodName": "newWorld",
                "description": "Creates a new World.",
                "parameters": [
                    {
                        "name": "xg",
                        "type": "number",
                        "description": " The x component of gravity. "
                    },
                    {
                        "name": "yg",
                        "type": "number",
                        "description": " The y component of gravity. "
                    },
                    {
                        "name": "sleep",
                        "type": "boolean",
                        "description": " Whether the bodies in this world are allowed to sleep. "
                    }
                ]
            },
            {
                "methodName": "setMeter",
                "description": "Sets the meter scale factor.",
                "parameters": [
                    {
                        "name": "scale",
                        "type": "number",
                        "description": " The scale factor as an integer. "
                    }
                ]
            }
        ]
    },
    {
        "category": "sound",
        "description": "This module is responsible for decoding sound files.",
        "functions": [
            {
                "methodName": "newDecoder",
                "description": "Attempts to find a decoder for the encoded sound data in the specified file.",
                "parameters": [
                    {
                        "name": "file",
                        "type": "File",
                        "description": " The file with encoded sound data. "
                    },
                    {
                        "name": "buffer",
                        "type": "number",
                        "description": " The size of each decoded chunk, in bytes. "
                    }
                ]
            },
            {
                "methodName": "newSoundData",
                "description": "Creates a new SoundData.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The file name of the file to load. "
                    }
                ]
            }
        ]
    },
    {
        "category": "system",
        "description": "Provides access to information about the user's system.",
        "functions": [
            {
                "methodName": "getClipboardText",
                "description": "Gets text from the clipboard.",
                "parameters": []
            },
            {
                "methodName": "getOS",
                "description": "Gets the current operating system.",
                "parameters": []
            },
            {
                "methodName": "getPowerInfo",
                "description": "Gets information about the system's power supply.",
                "parameters": []
            },
            {
                "methodName": "getProcessorCount",
                "description": "Gets the amount of logical processor in the system.",
                "parameters": []
            },
            {
                "methodName": "hasBackgroundMusic",
                "description": "Gets whether another application on the system is playing music in the background.",
                "parameters": []
            },
            {
                "methodName": "openURL",
                "description": "Opens a URL with the user's web or file browser.",
                "parameters": [
                    {
                        "name": "url",
                        "type": "string",
                        "description": " The URL to open. Must be formatted as a proper URL. "
                    }
                ]
            },
            {
                "methodName": "setClipboardText",
                "description": "Puts text in the clipboard.",
                "parameters": [
                    {
                        "name": "text",
                        "type": "string",
                        "description": " The new text to hold in the system's clipboard. "
                    }
                ]
            },
            {
                "methodName": "vibrate",
                "description": "Causes the device to vibrate, if possible.",
                "parameters": [
                    {
                        "name": "seconds",
                        "type": "number",
                        "description": " The duration to vibrate for. If called on an iOS device, it will always vibrate for 0.5 seconds due to limitations in the iOS system APIs. "
                    }
                ]
            }
        ]
    },
    {
        "category": "thread",
        "description": "Allows you to work with threads.",
        "functions": [
            {
                "methodName": "getChannel",
                "description": "Creates or retrieves a named thread channel.",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": " The name of the channel you want to create or retrieve. "
                    }
                ]
            },
            {
                "methodName": "newChannel",
                "description": "Creates a new unnamed thread channel.",
                "parameters": []
            },
            {
                "methodName": "newThread",
                "description": "Creates a new Thread from a Lua file or FileData object.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The name of the Lua file to use as the source. "
                    }
                ]
            }
        ]
    },
    {
        "category": "timer",
        "description": "Provides high-resolution timing functionality.",
        "functions": [
            {
                "methodName": "getAverageDelta",
                "description": "Returns the average delta time over the last second.",
                "parameters": []
            },
            {
                "methodName": "getDelta",
                "description": "Returns the time between the last two frames.",
                "parameters": []
            },
            {
                "methodName": "getFPS",
                "description": "Returns the current frames per second.",
                "parameters": []
            },
            {
                "methodName": "getTime",
                "description": "Returns the amount of time since some time in the past.",
                "parameters": []
            },
            {
                "methodName": "sleep",
                "description": "Pauses the current thread for the specified amount of time.",
                "parameters": [
                    {
                        "name": "s",
                        "type": "number",
                        "description": " Seconds to sleep for. "
                    }
                ]
            },
            {
                "methodName": "step",
                "description": "Measures the time between two frames.",
                "parameters": []
            }
        ]
    },
    {
        "category": "touch",
        "description": "Provides an interface to touch-screen presses.",
        "functions": [
            {
                "methodName": "getPosition",
                "description": "Gets the current position of the specified touch-press.",
                "parameters": [
                    {
                        "name": "userdata",
                        "type": "light",
                        "description": " The identifier of the touch-press. Use love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch id values. "
                    }
                ]
            },
            {
                "methodName": "getPressure",
                "description": "Gets the current pressure of the specified touch-press.",
                "parameters": [
                    {
                        "name": "userdata",
                        "type": "light",
                        "description": " The identifier of the touch-press. Use love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch id values. "
                    }
                ]
            },
            {
                "methodName": "getTouches",
                "description": "Gets a list of all active touch-presses.",
                "parameters": []
            }
        ]
    },
    {
        "category": "video",
        "description": "This module is responsible for decoding and streaming video files.",
        "functions": [
            {
                "methodName": "newVideoStream",
                "description": "Creates a new VideoStream.",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "string",
                        "description": " The file path to the Ogg Theora video file. "
                    }
                ]
            }
        ]
    },
    {
        "category": "window",
        "description": "Provides an interface for the program's window.",
        "functions": [
            {
                "methodName": "close",
                "description": "Closes the window.",
                "parameters": []
            },
            {
                "methodName": "fromPixels",
                "description": "Converts a number from pixels to density-independent units.",
                "parameters": [
                    {
                        "name": "pixelvalue",
                        "type": "number",
                        "description": " A number in pixels to convert to density-independent units. "
                    }
                ]
            },
            {
                "methodName": "getDPIScale",
                "description": "Gets the DPI scale factor associated with the window.",
                "parameters": []
            },
            {
                "methodName": "getDesktopDimensions",
                "description": "Gets the width and height of the desktop.",
                "parameters": [
                    {
                        "name": "display",
                        "type": "number",
                        "description": " The index of the display, if multiple monitors are available. "
                    }
                ]
            },
            {
                "methodName": "getDisplayCount",
                "description": "Gets the number of connected monitors.",
                "parameters": []
            },
            {
                "methodName": "getDisplayName",
                "description": "Gets the name of a display.",
                "parameters": [
                    {
                        "name": "displayindex",
                        "type": "number",
                        "description": " The index of the display to get the name of. "
                    }
                ]
            },
            {
                "methodName": "getFullscreen",
                "description": "Gets whether the window is fullscreen.",
                "parameters": []
            },
            {
                "methodName": "getFullscreenModes",
                "description": "Gets a list of supported fullscreen modes.",
                "parameters": [
                    {
                        "name": "display",
                        "type": "number",
                        "description": " The index of the display, if multiple monitors are available. "
                    }
                ]
            },
            {
                "methodName": "getIcon",
                "description": "Gets the window icon.",
                "parameters": []
            },
            {
                "methodName": "getMode",
                "description": "Gets the display mode and properties of the window.",
                "parameters": []
            },
            {
                "methodName": "getPosition",
                "description": "Gets the position of the window on the screen.",
                "parameters": []
            },
            {
                "methodName": "getTitle",
                "description": "Gets the window title.",
                "parameters": []
            },
            {
                "methodName": "hasFocus",
                "description": "Checks if the game window has keyboard focus.",
                "parameters": []
            },
            {
                "methodName": "hasMouseFocus",
                "description": "Checks if the game window has mouse focus.",
                "parameters": []
            },
            {
                "methodName": "isDisplaySleepEnabled",
                "description": "Gets whether the display is allowed to sleep while the program is running.",
                "parameters": []
            },
            {
                "methodName": "isMaximized",
                "description": "Gets whether the Window is currently maximized.",
                "parameters": []
            },
            {
                "methodName": "isMinimized",
                "description": "Gets whether the Window is currently minimized.",
                "parameters": []
            },
            {
                "methodName": "isOpen",
                "description": "Checks if the window is open.",
                "parameters": []
            },
            {
                "methodName": "isVisible",
                "description": "Checks if the game window is visible.",
                "parameters": []
            },
            {
                "methodName": "maximize",
                "description": "Makes the window as large as possible.",
                "parameters": []
            },
            {
                "methodName": "minimize",
                "description": "Minimizes the window to the system's task bar / dock.",
                "parameters": []
            },
            {
                "methodName": "requestAttention",
                "description": "Causes the window to request the attention of the user if it is not in the foreground.",
                "parameters": [
                    {
                        "name": "continuous",
                        "type": "boolean",
                        "description": " Whether to continuously request attention until the window becomes active, or to do it only once. "
                    }
                ]
            },
            {
                "methodName": "restore",
                "description": "Restores the size and position of the window if it was minimized or maximized.",
                "parameters": []
            },
            {
                "methodName": "setDisplaySleepEnabled",
                "description": "Sets whether the display is allowed to sleep while the program is running.",
                "parameters": [
                    {
                        "name": "enable",
                        "type": "boolean",
                        "description": " True to enable system display sleep, false to disable it. "
                    }
                ]
            },
            {
                "methodName": "setFullscreen",
                "description": "Enters or exits fullscreen.",
                "parameters": [
                    {
                        "name": "fullscreen",
                        "type": "boolean",
                        "description": " Whether to enter or exit fullscreen mode. "
                    }
                ]
            },
            {
                "methodName": "setIcon",
                "description": "Sets the window icon.",
                "parameters": [
                    {
                        "name": "imagedata",
                        "type": "ImageData",
                        "description": " The window icon image. "
                    }
                ]
            },
            {
                "methodName": "setMode",
                "description": "Sets the display mode and properties of the window.",
                "parameters": [
                    {
                        "name": "width",
                        "type": "number",
                        "description": " Display width. "
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "description": " Display height. "
                    },
                    {
                        "name": "flags",
                        "type": "table",
                        "description": " The flags table with the options: "
                    },
                    {
                        "name": "fullscreen",
                        "type": "boolean",
                        "description": " Fullscreen (true), or windowed (false). "
                    },
                    {
                        "name": "fullscreentype",
                        "type": "FullscreenType",
                        "description": " The type of fullscreen to use. This defaults to \"normal\" in 0.9.0 through 0.9.2 and to \"desktop\" in 0.10.0 and older. "
                    },
                    {
                        "name": "vsync",
                        "type": "boolean",
                        "description": " True if LÃ–VE should wait for vsync, false otherwise. "
                    },
                    {
                        "name": "msaa",
                        "type": "number",
                        "description": " The number of antialiasing samples. "
                    },
                    {
                        "name": "stencil",
                        "type": "boolean",
                        "description": " Whether a stencil buffer should be allocated. If true, the stencil buffer will have 8 bits. "
                    },
                    {
                        "name": "depth",
                        "type": "number",
                        "description": " The number of bits in the depth buffer. "
                    },
                    {
                        "name": "resizable",
                        "type": "boolean",
                        "description": " True if the window should be resizable in windowed mode, false otherwise. "
                    },
                    {
                        "name": "borderless",
                        "type": "boolean",
                        "description": " True if the window should be borderless in windowed mode, false otherwise. "
                    },
                    {
                        "name": "centered",
                        "type": "boolean",
                        "description": " True if the window should be centered in windowed mode, false otherwise. "
                    },
                    {
                        "name": "display",
                        "type": "number",
                        "description": " The index of the display to show the window in, if multiple monitors are available. "
                    },
                    {
                        "name": "minwidth",
                        "type": "number",
                        "description": " The minimum width of the window, if it's resizable. Cannot be less than 1. "
                    },
                    {
                        "name": "minheight",
                        "type": "number",
                        "description": " The minimum height of the window, if it's resizable. Cannot be less than 1. "
                    },
                    {
                        "name": "highdpi",
                        "type": "boolean",
                        "description": " True if high-dpi mode should be used on Retina displays in macOS and iOS. Does nothing on non-Retina displays. Added in 0.9.1. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x-coordinate of the window's position in the specified display. Added in 0.9.2. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y-coordinate of the window's position in the specified display. Added in 0.9.2. "
                    },
                    {
                        "name": "srgb",
                        "type": "boolean",
                        "description": " Removed in 0.10.0 (set t.gammacorrect in conf.lua instead). True if sRGB gamma correction should be applied when drawing to the screen. Added in 0.9.1. "
                    }
                ]
            },
            {
                "methodName": "setPosition",
                "description": "Sets the position of the window on the screen.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x-coordinate of the window's position. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y-coordinate of the window's position. "
                    },
                    {
                        "name": "display",
                        "type": "number",
                        "description": " The index of the display that the new window position is relative to. "
                    }
                ]
            },
            {
                "methodName": "setTitle",
                "description": "Sets the window title.",
                "parameters": [
                    {
                        "name": "title",
                        "type": "string",
                        "description": " The new window title. "
                    }
                ]
            },
            {
                "methodName": "showMessageBox",
                "description": "Displays a message box above the love window.",
                "parameters": [
                    {
                        "name": "title",
                        "type": "string",
                        "description": " The title of the message box. "
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "description": " The text inside the message box. "
                    },
                    {
                        "name": "type",
                        "type": "MessageBoxType",
                        "description": " The type of the message box. "
                    },
                    {
                        "name": "attachtowindow",
                        "type": "boolean",
                        "description": " Whether the message box should be attached to the love window or free-floating. "
                    }
                ]
            },
            {
                "methodName": "toPixels",
                "description": "Converts a number from density-independent units to pixels.",
                "parameters": [
                    {
                        "name": "value",
                        "type": "number",
                        "description": " A number in density-independent units to convert to pixels. "
                    }
                ]
            },
            {
                "methodName": "updateMode",
                "description": "Sets the display mode and properties of the window, without modifying unspecified properties.",
                "parameters": [
                    {
                        "name": "width",
                        "type": "number",
                        "description": " Window width. "
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "description": " Window height. "
                    },
                    {
                        "name": "settings",
                        "type": "table",
                        "description": " The settings table with the following optional fields. Any field not filled in will use the current value that would be returned by love.window.getMode. "
                    },
                    {
                        "name": "fullscreen",
                        "type": "boolean",
                        "description": " Fullscreen (true), or windowed (false). "
                    },
                    {
                        "name": "fullscreentype",
                        "type": "FullscreenType",
                        "description": " The type of fullscreen to use. "
                    },
                    {
                        "name": "vsync",
                        "type": "boolean",
                        "description": " True if LÃ–VE should wait for vsync, false otherwise. "
                    },
                    {
                        "name": "msaa",
                        "type": "number",
                        "description": " The number of antialiasing samples. "
                    },
                    {
                        "name": "resizable",
                        "type": "boolean",
                        "description": " True if the window should be resizable in windowed mode, false otherwise. "
                    },
                    {
                        "name": "borderless",
                        "type": "boolean",
                        "description": " True if the window should be borderless in windowed mode, false otherwise. "
                    },
                    {
                        "name": "centered",
                        "type": "boolean",
                        "description": " True if the window should be centered in windowed mode, false otherwise. "
                    },
                    {
                        "name": "display",
                        "type": "number",
                        "description": " The index of the display to show the window in, if multiple monitors are available. "
                    },
                    {
                        "name": "minwidth",
                        "type": "number",
                        "description": " The minimum width of the window, if it's resizable. Cannot be less than 1. "
                    },
                    {
                        "name": "minheight",
                        "type": "number",
                        "description": " The minimum height of the window, if it's resizable. Cannot be less than 1. "
                    },
                    {
                        "name": "highdpi",
                        "type": "boolean",
                        "description": " True if high-dpi mode should be used on Retina displays in macOS and iOS. Does nothing on non-Retina displays. "
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": " The x-coordinate of the window's position in the specified display. "
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": " The y-coordinate of the window's position in the specified display.. "
                    }
                ]
            }
        ]
    }
]